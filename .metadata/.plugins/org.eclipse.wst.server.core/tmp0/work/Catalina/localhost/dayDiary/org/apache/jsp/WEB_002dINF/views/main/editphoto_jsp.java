/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2023-12-03 09:35:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class editphoto_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/eGovFrame-4.0.0/project_DAY/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/day/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/eGovFrame-4.0.0/project_DAY/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/day/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1698885481330L));
    _jspx_dependants.put("jar:file:/C:/eGovFrame-4.0.0/project_DAY/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/day/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write('\r');
      out.write('\n');
      if (_jspx_meth_c_005fset_005f1(_jspx_page_context))
        return;
      out.write('\r');
      out.write('\n');
      if (_jspx_meth_c_005fset_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>스케치 패드</title>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.1/fabric.min.js\"></script>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.slim.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/edit.css\" rel=\"stylesheet\" />\r\n");
      out.write("<!-- Cropper.js CSS 파일 -->\r\n");
      out.write("<link  href=\"https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<!-- Cropper.js JavaScript 파일 -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js\"></script>\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/header.css\" rel=\"stylesheet\" />\r\n");
      out.write(" \r\n");
      out.write(" <link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/Font.css\" rel=\"stylesheet\"> \r\n");
      out.write("    \r\n");
      out.write(" <style>\r\n");
      out.write("body {\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding: 0;\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    max-height: 911px;\r\n");
      out.write("    flex-direction: column;\r\n");
      out.write("    background-color: #f8f8f8;\r\n");
      out.write("}\r\n");
      out.write("li.nav-item.rg {\r\n");
      out.write("    margin-left: 0.5em;\r\n");
      out.write("}\r\n");
      out.write("#canvas-container {\r\n");
      out.write("    /* border: 1px solid #ccc; */\r\n");
      out.write("    margin-bottom: 20px;\r\n");
      out.write("    margin-top: 150px;\r\n");
      out.write("    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.25); \r\n");
      out.write("    border-radius: 5px\r\n");
      out.write("}\r\n");
      out.write("#image-container {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    overflow-x: auto;\r\n");
      out.write("    white-space: nowrap;  /* 자식 요소들이 한 줄에 나열되도록 설정 */\r\n");
      out.write("    padding-bottom: 1rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#sticker-container{\r\n");
      out.write("    display: flex;\r\n");
      out.write("    overflow-x: auto;\r\n");
      out.write("    white-space: nowrap;  /* 자식 요소들이 한 줄에 나열되도록 설정 */\r\n");
      out.write("    padding-bottom: 1rem;\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write(".sticker-img {\r\n");
      out.write("    width: 70px; /* 또는 원하는 크기 */\r\n");
      out.write("    height: auto; /* 이미지 비율 유지 */\r\n");
      out.write("    margin-right: 10px\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#bg-container {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    overflow-x: auto;\r\n");
      out.write("     white-space: nowrap;  /* 자식 요소들이 한 줄에 나열되도록 설정 */\r\n");
      out.write("    padding-bottom: 1rem;\r\n");
      out.write("    \r\n");
      out.write("}\r\n");
      out.write("#start-drawing-button img, #prev-button img , #next-button img , #reset-button img,\r\n");
      out.write("#photo-upload-button img, #bg-upload-button img, #text-button img, #eraser-button img,\r\n");
      out.write("#delete-button img, #bring-to-front-button img, #send-to-back-button img, #paint-btn img, \r\n");
      out.write("#fill-btn img, #crop-button img\r\n");
      out.write("{\r\n");
      out.write("    max-width: 1.9rem; /* 원하는 크기로 조절 */\r\n");
      out.write("    /* max-height: 30px; */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#save-jpg-button img, #temp-box img {\r\n");
      out.write("\tmax-width: 1.5rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* 편집 툴 css */\r\n");
      out.write("button#start-drawing-button,\r\n");
      out.write("button#prev-button,\r\n");
      out.write("button#next-button,\r\n");
      out.write("button#reset-button,\r\n");
      out.write("button#text-button,\r\n");
      out.write("button#eraser-button,\r\n");
      out.write("button#delete-button,\r\n");
      out.write("button#send-to-back-button,\r\n");
      out.write("button#bring-to-front-button,\r\n");
      out.write("button#paint-btn,\r\n");
      out.write("button#fill-btn,\r\n");
      out.write("button#crop-button,\r\n");
      out.write("button#save-jpg-button,\r\n");
      out.write("div.group-5{\r\n");
      out.write("   border: 0px;\r\n");
      out.write("   background-color: white;\r\n");
      out.write("   margin: 0 1em;\r\n");
      out.write("}\r\n");
      out.write("div#edit-tool {\r\n");
      out.write("   text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".drawing-tool {\r\n");
      out.write("   display: flex;\r\n");
      out.write("   flex-direction: row;\r\n");
      out.write("   justify-content: center;\r\n");
      out.write("   margin-top: 1.5em;\r\n");
      out.write("}\r\n");
      out.write(".txt-tool {\r\n");
      out.write("   display: flex;\r\n");
      out.write("   flex-direction: row;\r\n");
      out.write("   justify-content: center;\r\n");
      out.write("   margin-top: 1.5em;\r\n");
      out.write("}\r\n");
      out.write(".eraser-tool {\r\n");
      out.write("   display: flex;\r\n");
      out.write("   flex-direction: row;\r\n");
      out.write("   justify-content: center;\r\n");
      out.write("   margin-top: 1.5em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".paint-tool {\r\n");
      out.write("   margin-top: 1.5em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".text-color-div {\r\n");
      out.write("   margin-right: 1em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#text-color-picker, #font-family-selector{\r\n");
      out.write("   margin-left: 0.4em;\r\n");
      out.write("} \r\n");
      out.write("\r\n");
      out.write("input#eraser-size-slider, input#line-width {\r\n");
      out.write("   margin-left: 0.5em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".line-color-div{\r\n");
      out.write("   margin-right: 1em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".line-width-div{\r\n");
      out.write("   margin-left: 1em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".tab-content {\r\n");
      out.write("   margin-bottom: 1.2em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".frame {\r\n");
      out.write("  position: relative;\r\n");
      out.write("  display: flex;\r\n");
      out.write("  flex-direction: column;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("  justify-content: center;\r\n");
      out.write("  gap: 8px;\r\n");
      out.write("  padding: 16px;\r\n");
      out.write("  background-color: #f0f0f0;\r\n");
      out.write("  border-radius: 5px;\r\n");
      out.write("  overflow: hidden;\r\n");
      out.write("  border: 1px solid #898989;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  font-size: 14px;\r\n");
      out.write("  width: 6.5em;\r\n");
      out.write("  height: 6.5em;\r\n");
      out.write("  cursor:pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".frame .add-undefined-glyph {\r\n");
      out.write("  width: 24px;\r\n");
      out.write("  height: 24px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* 편집 기본틀 (맨아래)  */\r\n");
      out.write("#image-edit-tools {\r\n");
      out.write("  position: fixed;\r\n");
      out.write("  bottom: 0;\r\n");
      out.write("  left: 0;\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  background-color: #fff;\r\n");
      out.write("  padding-bottom: 10px;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  z-index: 1000; /* 다른 요소 위에 나타나도록 z-index 설정 */\r\n");
      out.write("  /* box-shadow: 0px 2px 12px #0000001a; */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#image-edit-tools button {\r\n");
      out.write("  margin: 0 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* 이미지 편집틀 (위) */\r\n");
      out.write("#img-tools {\r\n");
      out.write("  position: fixed;\r\n");
      out.write("  bottom: 0;\r\n");
      out.write("  left: 0;\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  background-color: #fff;\r\n");
      out.write("  padding: 15px;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  z-index: 1000; /* 다른 요소 위에 나타나도록 z-index 설정 */\r\n");
      out.write("  /* box-shadow: 0px 2px 12px #0000001a; */\r\n");
      out.write("  margin-bottom: 3.25em;\r\n");
      out.write("  display:flex;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("  justify-content: center;\r\n");
      out.write("  border-top : 1px solid #f3f3f3;\r\n");
      out.write("  border-bottom : 1px solid #f3f3f3;\r\n");
      out.write("  flex-direction: column;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#photo-col {\r\n");
      out.write("   width: 100%;\r\n");
      out.write("} \r\n");
      out.write("\r\n");
      out.write("/* #photo-col::-webkit-scrollbar {\r\n");
      out.write("  width: 5rem;\r\n");
      out.write("}\r\n");
      out.write("#photo-col::-webkit-scrollbar-thumb {\r\n");
      out.write("  background-color: tomato; \r\n");
      out.write("  border-radius: 5em; \r\n");
      out.write("}\r\n");
      out.write("#photo-col::-webkit-scrollbar-track {\r\n");
      out.write("  border-radius: 5em;\r\n");
      out.write("}\r\n");
      out.write(" */\r\n");
      out.write("div#bg-col {\r\n");
      out.write("   width: 100%;\r\n");
      out.write("} \r\n");
      out.write("\r\n");
      out.write("div#sticker-col {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("}\r\n");
      out.write("#img-edit-tool {\r\n");
      out.write("  text-align: center; /* 가운데 정렬 */\r\n");
      out.write("  display: flex;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#img-edit-tool ul {\r\n");
      out.write("  list-style: none; /* 리스트 점 제거 */\r\n");
      out.write("  display: flex; /* 가로로 정렬 */\r\n");
      out.write("  margin: 0;\r\n");
      out.write("  padding: 0; /* 기본 패딩 제거 */\r\n");
      out.write("  justify-content: center; /* 가운데 정렬 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#img-edit-tool li {\r\n");
      out.write("  margin: 0 3em;\r\n");
      out.write("  font-family:'SUITE-Regular';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("#img-edit-tool a {\r\n");
      out.write("  text-decoration: none; /* 링크 밑줄 제거 */\r\n");
      out.write("  color: inherit; /* 링크 색상을 부모 요소 상속값으로 설정 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#img-tools{\r\n");
      out.write("   position: relative;\r\n");
      out.write("   margin-bottom: 1em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("/* 자르기 모달 */\r\n");
      out.write("#crop-body img {\r\n");
      out.write("   max-width: 100%;   \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#crop-body{\r\n");
      out.write("    display: flex;          /* Flexbox 사용 */\r\n");
      out.write("    justify-content: center; /* 수평 중앙 정렬 */\r\n");
      out.write("    align-items: center;     /* 수직 중앙 정렬 */\r\n");
      out.write("    height: 100%;           /* 전체 높이 사용 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".cropper-container.cropper-bg {\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    height: 400px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#crop-modal {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    min-height: 85vh;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* .modal-content {\r\n");
      out.write("    margin-top: auto;\r\n");
      out.write("    margin-bottom: auto;\r\n");
      out.write("} */\r\n");
      out.write("\r\n");
      out.write("button.temp-btn {\r\n");
      out.write("    margin-left: 0.7em;\r\n");
      out.write("    font-size: 9pt;\r\n");
      out.write("    border: solid 1px #d7d7d7;\r\n");
      out.write("    background-color: white;\r\n");
      out.write("    border-radius: 7px;\r\n");
      out.write("    color: #a7a7a7;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("input[type=\"radio\"] {\r\n");
      out.write("    margin-right: 0.5rem;\r\n");
      out.write("    width: 0.6rem;\r\n");
      out.write("}\r\n");
      out.write("li.temp-list-li {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    justify-content: space-between;\r\n");
      out.write("    margin-bottom: 0.7rem;\r\n");
      out.write("}\r\n");
      out.write("ul#temp-list {\r\n");
      out.write("\tlist-style-type: none;\r\n");
      out.write("\tpadding: 0 1.5rem;\r\n");
      out.write("\tmargin: 1em 0;\r\n");
      out.write("}\r\n");
      out.write(".name-div {\r\n");
      out.write("\tfont-size: 13.5pt;\r\n");
      out.write("}\r\n");
      out.write("h4#modal-title {\r\n");
      out.write("    font-size: 11pt;\r\n");
      out.write("    color: #757575;\r\n");
      out.write("}\r\n");
      out.write("button#temp_load, button#upload-button, button#confirmCrop, button#aiImgUpload_btn{\r\n");
      out.write("    background-color: #e7e7e7;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 7px;\r\n");
      out.write("    font-size: 10pt;\r\n");
      out.write("    padding: 0.5rem;\r\n");
      out.write("    color: #494949;\r\n");
      out.write("    width: 5em;\r\n");
      out.write("    border: 0.5px solid #ededed;\r\n");
      out.write("}\r\n");
      out.write("button#upload-button{\r\n");
      out.write("\tmargin-left: 2em;\r\n");
      out.write("}\r\n");
      out.write("button#close-btn {\r\n");
      out.write("    background-color: white;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 7px;\r\n");
      out.write("    font-size: 10pt;\r\n");
      out.write("    padding: 0.5rem;\r\n");
      out.write("    color: #494949;\r\n");
      out.write("    width: 5em;\r\n");
      out.write("    border: 0.5px solid #ededed;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".modal-footer {\r\n");
      out.write("    height: 3.5em;\r\n");
      out.write("    margin: 0;\r\n");
      out.write("    padding-right: 1.5em;\r\n");
      out.write("    margin-bottom: 0.95rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("select#diaryname-selector {\r\n");
      out.write("    margin-right: 1em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".active-button{\r\n");
      out.write("    background-color: #f8f8f8;\r\n");
      out.write("    margin: 0 10px;\r\n");
      out.write("    box-shadow: 1px 1px 1px 1px #dcdcdc;\r\n");
      out.write("    border-radius: 3px;\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#editable-div:focus {\r\n");
      out.write("  outline: 0.5px solid #e8e8e8;\r\n");
      out.write("  border-radius: 8px;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("/* 그림판 header*/\r\n");
      out.write("\r\n");
      out.write("#mainNav{\r\n");
      out.write("\tpadding-top: 1.1em;\r\n");
      out.write("\tpadding-bottom: 1.1em;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#download-li, #temp-li, #save-li {\r\n");
      out.write("  background-color: #ffffff;\r\n");
      out.write("  border-radius: 12px;\r\n");
      out.write("  box-shadow: 0px 0px 8px #0000001a;\r\n");
      out.write("  width: 140px;\r\n");
      out.write("  height: 3em;\r\n");
      out.write("  display: flex;\r\n");
      out.write("  justify-content: center;\r\n");
      out.write("  align-items: center;\r\n");
      out.write("  font-weight: 700;\r\n");
      out.write("  font-size: 14px;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  letter-spacing: 0;\r\n");
      out.write("  line-height: normal;\r\n");
      out.write("  letter-spacing: 0.1em; /* 글자간격 */   \r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".text-wrapper-4, .text-wrapper-3{\r\n");
      out.write("  align-items: center;\r\n");
      out.write("  font-weight: 700;\r\n");
      out.write("  font-size: 14px;\r\n");
      out.write("  text-align: center;\r\n");
      out.write("  letter-spacing: 0;\r\n");
      out.write("  line-height: normal;\r\n");
      out.write("  letter-spacing: 0.1em; /* 글자간격 */ \r\n");
      out.write("  font-family:'SUITE-Regular';\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#save-li {\r\n");
      out.write("  background-color: #00315c;\r\n");
      out.write("  color: white;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".group-4, .group-5 {\r\n");
      out.write("    display: flex;\r\n");
      out.write("    align-items: center;\r\n");
      out.write("    justify-content: center;\r\n");
      out.write("    gap: 0.5rem;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#centered-button {\r\n");
      out.write("  text-align: center; /* 내부 요소를 중앙에 정렬합니다 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#centered-button *{\r\n");
      out.write("   font-family:'SUITE-Regular';\r\n");
      out.write("   font-weight: 500;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".centered-button {\r\n");
      out.write("   margin-top: 10px;\r\n");
      out.write("   margin-bottom: 10px;\r\n");
      out.write("   background-color: #00315c; /* 버튼 배경색을 설정합니다 */\r\n");
      out.write("   color: white; /* 버튼 텍스트 색을 흰색으로 설정합니다 */\r\n");
      out.write("   border: none; /* 버튼 테두리를 제거합니다 */\r\n");
      out.write("   padding: 10px 20px; /* 버튼 내부 여백을 설정합니다 */\r\n");
      out.write("   cursor: pointer; /* 마우스 오버 시 커서를 포인터로 변경합니다 */\r\n");
      out.write("   border-radius: 5px;\r\n");
      out.write("   transition: background-color 0.3s;\r\n");
      out.write("   font-size:larger; /* 버튼이 너무 작아서 안보여서 바꿈 */\r\n");
      out.write("   /* 추가적인 스타일링이 필요할 수 있습니다 */\r\n");
      out.write("}\r\n");
      out.write(".centered-button:hover {\r\n");
      out.write("  background-color: #143858e8; /* 호버 상태에서 배경색을 더 연한 색으로 변경 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".checkbox-container {\r\n");
      out.write("  margin-top: 10px; /* 버튼과의 공간을 주기 위해 margin-top 추가 */\r\n");
      out.write("  display: block; /* 체크박스를 블록 요소로 만듭니다 */\r\n");
      out.write("}\r\n");
      out.write(" .no_more {\r\n");
      out.write("  margin-top: 10px; /* 버튼과의 공간을 주기 위해 margin-top 추가 */\r\n");
      out.write("  text-align: center; /* 텍스트 중앙 정렬 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#guide-body {\r\n");
      out.write("  position: relative; /* 부모 요소에 상대적 포지셔닝 적용 */\r\n");
      out.write("}\r\n");
      out.write("#img-edit-tool ul li:hover {\r\n");
      out.write("\tcolor: #00315c;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#centered-button {\r\n");
      out.write("  position: absolute; /* 버튼에 절대 포지셔닝 적용 */\r\n");
      out.write("  top: 50%; /* 상단에서 50% 떨어진 위치 */\r\n");
      out.write("  left: 50%; /* 좌측에서 50% 떨어진 위치 */\r\n");
      out.write("  transform: translate(-50%, -50%); /* 버튼을 정확히 중앙에 배치 */\r\n");
      out.write("  /* 버튼 스타일 */\r\n");
      out.write("  padding: 10px 20px;\r\n");
      out.write("  color: white;\r\n");
      out.write("  border: none;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("/* 이미지 크기 조정 */\r\n");
      out.write("\r\n");
      out.write("#guide_img {\r\n");
      out.write("  max-width: 100%;  /* 너비를 모달에 맞게 조정 */\r\n");
      out.write("  max-height: 100%; /* 높이를 모달에 맞게 조정 */\r\n");
      out.write("  width: auto;      /* 너비 자동 조정 */\r\n");
      out.write("  height: auto;     /* 높이 자동 조정 */\r\n");
      out.write("  display: block;\r\n");
      out.write("  margin: auto;     /* 중앙 정렬 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 버튼 안에 글자*/\r\n");
      out.write(".frame{\r\n");
      out.write("\tfont-family:\"SUITE-Regular\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#upload-button{\r\n");
      out.write("\tfont-family:\"SUITE-Regular\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#editable-div {\r\n");
      out.write("padding: 0.25rem;\r\n");
      out.write("  outline: none;\r\n");
      out.write("  width: 20rem;\r\n");
      out.write("  font-family:\"SUITE-Regular\";\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- 가이드 모달  -->\r\n");
      out.write("<div class=\"modal\" id=\"guide_Modal\">\r\n");
      out.write("  <div class=\"modal-dialog modal-fullscreen\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("\r\n");
      out.write("      <!-- Modal body -->\r\n");
      out.write("      <div id=\"guide-body\" class=\"modal-body\">\r\n");
      out.write("        <img id=\"guide_img\" alt=\"\" src=\"https://daydayday.s3.ap-northeast-2.amazonaws.com/EditPage/component/tuto.png\">\r\n");
      out.write("         \r\n");
      out.write("         <div id=\"centered-button\">\r\n");
      out.write("         <button class=\"centered-button\">편집 시작하기</button>\r\n");
      out.write("            <div class=\"no_more\">\r\n");
      out.write("               <label>\r\n");
      out.write("               <input type=\"checkbox\" id=\"noShowAgain\"> 더 이상 보지 않기\r\n");
      out.write("             </label>\r\n");
      out.write("            </div>\r\n");
      out.write("         </div>\r\n");
      out.write("         \r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   <input type=\"hidden\" id=\"user_id\" name=\"user_id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${mvo.user_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("  \r\n");
      out.write("\t <nav class=\"navbar navbar-expand-lg navbar-dark fixed-top\" id=\"mainNav\">\r\n");
      out.write("            <div class=\"container\">\r\n");
      out.write("               <ul class=\"navbar-nav text-uppercase ms-auto py-4 py-lg-0\">\r\n");
      out.write("                   <li class=\"nav-item\"><a class=\"navbar-brand\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/\">D.A.Y</a></li>\r\n");
      out.write("                   <li class=\"nav-item rg\">\r\n");
      out.write("                   \t<div class=\"editable-div div\" id=\"editable-div\" contenteditable=\"true\">제목을 입력하세요</div>\r\n");
      out.write("                   </li>\r\n");
      out.write("               </ul>\r\n");
      out.write("                <div class=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n");
      out.write("                    <ul class=\"navbar-nav text-uppercase ms-auto py-4 py-lg-0\">\r\n");
      out.write("                    \r\n");
      out.write("                    <li class=\"nav-item\" id=\"download-li\">\r\n");
      out.write("\t\t             <button class=\"group-3\" id=\"save-jpg-button\">\r\n");
      out.write("\t\t               <div class=\"group-4\">\r\n");
      out.write("\t\t                 <div class=\"text-wrapper-4\">내보내기</div>\r\n");
      out.write("\t\t                 <img class=\"img\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/download.png\" />\r\n");
      out.write("\t\t               </div>\r\n");
      out.write("\t\t             </button>                                       \r\n");
      out.write("                    </li>\r\n");
      out.write("                    \r\n");
      out.write("                    <li class=\"nav-item\" id=\"temp-li\">\r\n");
      out.write("\t\t             <div class=\"group-5\" id=\"temp-box\">\r\n");
      out.write("\t\t               <div class=\"group-6\">\r\n");
      out.write("\t\t                 <div id=\"sticker_temp_upload\" type=\"button\">\r\n");
      out.write("\t\t                    <div class=\"text-wrapper-4\">임시저장</div>\r\n");
      out.write("\t\t                 </div>\r\n");
      out.write("\t\t               </div>\r\n");
      out.write("\t\t               <div class=\"group-7\">\r\n");
      out.write("\t\t                 <div data-bs-toggle=\"modal\" data-bs-target=\"#temp_Modal\">\r\n");
      out.write("\t\t                    <img class=\"img\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/temp.png\" />\t\t\r\n");
      out.write("\t\t                 </div>\r\n");
      out.write("\t\t               </div>\r\n");
      out.write("\t\t             </div>                  \r\n");
      out.write("                    </li>\r\n");
      out.write("                    \r\n");
      out.write("                               \r\n");
      out.write("                    <li class=\"nav-item\" id=\"save-li\">\r\n");
      out.write("\t\t             <div class=\"group-wrapper\" data-bs-toggle=\"modal\" data-bs-target=\"#myModal\">\r\n");
      out.write("\t\t               <div class=\"group-2\">\r\n");
      out.write("\t\t                 <div>\r\n");
      out.write("\t\t                    <div class=\"text-wrapper-3\">등록</div>\r\n");
      out.write("\t\t                 </div>\r\n");
      out.write("\t\t               </div>\r\n");
      out.write("\t\t             </div>                    \r\n");
      out.write("                    </li>\r\n");
      out.write("             \r\n");
      out.write("            </ul>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("        </nav>\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"canvas-container\">\r\n");
      out.write("  <canvas id=\"main-canvas\" width=\"1000\" height=\"600\"></canvas>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\" id=\"tool-container\">\r\n");
      out.write("  \r\n");
      out.write("   <div id=\"image-edit-tools\">\r\n");
      out.write("   \r\n");
      out.write("      <div id=\"img-tools\">\r\n");
      out.write("         <div id=\"img-edit-tool\">\r\n");
      out.write("            <ul>\r\n");
      out.write("               <li id=\"photo-col-btn\"><a href=\"#home\" id=\"tab-1\" onclick=\"changeColor('tab-1')\">사진</a></li>\r\n");
      out.write("               <li id=\"bg-col-btn\"><a href=\"#menu1\" id=\"tab-2\" onclick=\"changeColor('tab-2')\" >배경</a></li>\r\n");
      out.write("               <li id=\"ai-col-btn\"><a href=\"#menu4\"  id=\"tab-4\" onclick=\"changeColor('tab-4')\">A.I</a></li>\r\n");
      out.write("            </ul>            \r\n");
      out.write("         </div>      \r\n");
      out.write("\r\n");
      out.write("          <div id=\"photo-col\" class=\"collapse\">  \r\n");
      out.write("            <div id=\"image-container\">\r\n");
      out.write("               <div id=\"photo-upload-button\" class=\"frame\" style=\"min-width: 6.5em;\">\r\n");
      out.write("                 <img class=\"add-undefined-glyph\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/upload.png\" alt=\"업로드\">\r\n");
      out.write("                 사진<br/>가져오기\r\n");
      out.write("                <input type=\"file\" id=\"image-upload\" multiple=\"multiple\" accept=\"image/*\" style= \"display: none;\">           \r\n");
      out.write("               </div>\r\n");
      out.write("               \r\n");
      out.write("            </div>      \r\n");
      out.write("          </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("          <div id=\"bg-col\" class=\"collapse\"><br>     \r\n");
      out.write("            <div id=\"bg-container\">\r\n");
      out.write("               <div id=\"bg-upload-button\" class=\"frame\" style=\"min-width: 6.5em;\">\r\n");
      out.write("                 <img class=\"add-undefined-glyph\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/upload.png\" alt=\"업로드\">\r\n");
      out.write("                 사진<br/>가져오기\r\n");
      out.write("                <input type=\"file\" id=\"background-upload\" multiple=\"multiple\" accept=\"image/*\" style= \"display: none;\">         \r\n");
      out.write("               </div>\r\n");
      out.write("           </div>\r\n");
      out.write("          </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("          \r\n");
      out.write("\t\t  <div id=\"ai-col\" class=\"collapse\"><br>\r\n");
      out.write("            <div id=\"ai-container\">\r\n");
      out.write("               <button type=\"button\" class=\"frame\" id=\"aimodal-button\" data-bs-toggle=\"modal\" data-bs-target=\"#imageEdit-modal\">\r\n");
      out.write("                  <img class=\"add-undefined-glyph\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/upload.png\" alt=\"업로드\">\r\n");
      out.write("                  AI<br/>사용하기\r\n");
      out.write("               </button>\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>           \r\n");
      out.write("                       \r\n");
      out.write("      </div> <!-- img-tools 끝 -->\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("        <div id=\"edit-tool\">\r\n");
      out.write("           <button id=\"prev-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/prev.png\" alt=\"이전으로\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"next-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/next.png\" alt=\"다음으로\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"reset-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/reset.png\" alt=\"초기화\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"delete-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/delete.png\" alt=\"이미지 삭제\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"crop-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/crop.png\" alt=\"자르기\">              \r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"bring-to-front-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/stack-forward.png\" alt=\"이미지 맨앞으로\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"send-to-back-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/stack-backward.png\" alt=\"이미지 맨뒤로\">\r\n");
      out.write("           </button>\r\n");
      out.write("            <button id=\"start-drawing-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/pencil.png\" alt=\"그리기 모드 시작\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"paint-btn\">\r\n");
      out.write("              <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/fill.png\" alt=\"페인트\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"eraser-button\">\r\n");
      out.write("              <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/eraser.png\" alt=\"지우개\">\r\n");
      out.write("           </button>\r\n");
      out.write("           <button id=\"text-button\">\r\n");
      out.write("             <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/day/editor/txt.png\" alt=\"텍스트\">\r\n");
      out.write("           </button>\r\n");
      out.write("           \r\n");
      out.write("                      \r\n");
      out.write("        \r\n");
      out.write("           \t\r\n");
      out.write("               \r\n");
      out.write("           <div class=\"collapse\" id=\"drawing-options1\">\r\n");
      out.write("              <div class=\"drawing-tool\">\r\n");
      out.write("                 <div class=\"line-color-div\"><input type=\"color\" id=\"line-color\" value=\"#000000\"></div>\r\n");
      out.write("                 <div class=\"line-width-div\">두께<input type=\"range\" id=\"line-width\" min=\"1\" max=\"10\" value=\"2\"></div>\r\n");
      out.write("              </div>\r\n");
      out.write("            </div>\r\n");
      out.write("           \r\n");
      out.write("           \r\n");
      out.write("            <div class=\"collapse\" id=\"drawing-options2\">\r\n");
      out.write("              <div class=\"txt-tool\">\r\n");
      out.write("                 <div class=\"text-color-div\">텍스트 색상<input type=\"color\" id=\"text-color-picker\" value=\"#000000\"></div>\r\n");
      out.write("                 <label for=\"font-family-selector\" class=\"font-selector\">글씨체</label>\r\n");
      out.write("                   <select id=\"font-family-selector\">\r\n");
      out.write("                       <option value=\"굴림\">굴림</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"궁서\">궁서</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"돋움\">돋움</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"바탕\">바탕</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"'EF_jejudoldam'\">제주돌담체</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"'EF_AONE'\">A1</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"'GoryeongStrawberry'\">고령딸기</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"'EarlyFontDiary'\">다이어리체</option>\r\n");
      out.write("\t\t\t\t\t\t\t<option value=\"'HSYuji-Regular'\">HS유지체</option>\r\n");
      out.write("                      \r\n");
      out.write("                   </select> \r\n");
      out.write("                 <input type=\"file\" id=\"font-upload\" accept=\".ttf,.otf\" style=\"margin-left:2em; display:none;\"/>\r\n");
      out.write("              </div>\r\n");
      out.write("           </div>\r\n");
      out.write("           \r\n");
      out.write("           <div class=\"collapse\" id=\"drawing-options3\">\r\n");
      out.write("              <div class=\"eraser-tool\">\r\n");
      out.write("                 <div class=\"eraser-width-div\">지우개 두께<input type=\"range\" id=\"eraser-size-slider\" min=\"1\" max=\"50\" value=\"10\"></div>\r\n");
      out.write("              </div>\r\n");
      out.write("           </div>\r\n");
      out.write("           \r\n");
      out.write("           <div class=\"collapse\" id=\"drawing-options4\">\r\n");
      out.write("              <div class=\"paint-tool\">\r\n");
      out.write("                    <div class=\"fill-color-div\"><input type=\"color\" id=\"paint-color\" value=\"#000000\"></div>\r\n");
      out.write("              </div>\r\n");
      out.write("           </div>\r\n");
      out.write("         </div> <!-- edit-tool 끝 -->\r\n");
      out.write("     \r\n");
      out.write("   </div> <!-- image-edit-tools 끝 -->\r\n");
      out.write("\r\n");
      out.write("</div> <!-- container 끝 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 업로드  Modal -->\r\n");
      out.write("<div class=\"modal\" id=\"myModal\">\r\n");
      out.write("  <div class=\"modal-dialog modal-dialog-centered modal-dialog modal-m\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("\r\n");
      out.write("      <!-- Modal Header -->\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h4 class=\"modal-title\" id=\"modal-title\">미리보기</h4>\r\n");
      out.write("        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <!-- Modal body -->\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("         <img id=\"canvas-image\" src=\"\" alt=\"Canvas Image\" style=\"width:100%;\"/>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <!-- Modal footer -->\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t<button id=\"upload-button\" type=\"button\" class=\"btn btn-secondary\"\r\n");
      out.write("\t\t\t\t\t\tdata-bs-dismiss=\"modal\">업로드</button>\r\n");
      out.write("\t\t\t\t\t<button id=\"close-btn\" type=\"button\" data-bs-dismiss=\"modal\">취소</button>      \r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("<!--  -->\r\n");
      out.write("<!-- 임시저장  Modal -->\r\n");
      out.write("<div class=\"modal\" id=\"temp_Modal\">\r\n");
      out.write("  <div class=\"modal-dialog modal-dialog-centered modal-dialog modal-l\">\r\n");
      out.write("    <div class=\"modal-content\">\r\n");
      out.write("\r\n");
      out.write("      <!-- Modal Header -->\r\n");
      out.write("      <div class=\"modal-header\">\r\n");
      out.write("        <h4 class=\"modal-title\" id=\"modal-title\">임시저장</h4>\r\n");
      out.write("        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <!-- Modal body -->\r\n");
      out.write("      <div class=\"modal-body\">\r\n");
      out.write("         <ul id=\"temp-stickers-list\"></ul>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("      <!-- Modal footer -->\r\n");
      out.write("      <div class=\"modal-footer\">\r\n");
      out.write("         <button id=\"temp_load\" type=\"button\" data-bs-dismiss=\"modal\">확인</button>\r\n");
      out.write("        <button id=\"close-btn\" type=\"button\" data-bs-dismiss=\"modal\">닫기</button>\r\n");
      out.write("      </div>\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 자르기 Modal -->\r\n");
      out.write("<div class=\"modal fade\" id=\"cropModal\" tabindex=\"-1\" aria-labelledby=\"cropModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("    <div class=\"modal-dialog\" id=\"crop-modal\">\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <div class=\"modal-body\" id=\"crop-body\"style=\"width: 100%; height: 450px;\">\r\n");
      out.write("                <img id=\"modalImage\">\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"modal-footer\">\r\n");
      out.write("\t\t         <button id=\"confirmCrop\" type=\"button\" data-bs-dismiss=\"modal\">확인</button>\r\n");
      out.write("\t\t         <button id=\"close-btn\" type=\"button\" data-bs-dismiss=\"modal\">취소</button>            \r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!--  AI기능 모달 -->\r\n");
      out.write("\t<div class=\"modal fade\" id=\"imageEdit-modal\">\r\n");
      out.write("\t\t<div class=\"modal-dialog modal-dialog-centered imageEdit-modal__wrap\">\r\n");
      out.write("\t\t\t<div class=\"modal-content\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"modal-header\" id=\"ai-modal-head\">\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"\r\n");
      out.write("\t\t\t\t\t\taria-label=\"Close\" id=\"imageEdit-modal__closebtn\"></button>\r\n");
      out.write("\t\t\t\t\t<!-- <h4 class=\"modal-title\" id=\"AImodal-title\">AI 기능을 사용해보세요</h4> -->\r\n");
      out.write("\t\t\t\t\t<div class=\"ai-imgEdit__menu\">\r\n");
      out.write("\t\t\t\t\t\t<ul>\r\n");
      out.write("\t\t\t\t\t\t\t<li id=\"removeBg-menu\"><a href=\"#Ai-menu1\" id=\"tab-ai-1\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"Ai-menu__a\" onclick=\"changeColor('tab-ai-1')\">배경 지우기</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li id=\"imageGenerator-menu\"><a href=\"#Ai-menu2\"\r\n");
      out.write("\t\t\t\t\t\t\t\tid=\"tab-ai-2\" class=\"Ai-menu__a\"\r\n");
      out.write("\t\t\t\t\t\t\t\tonclick=\"changeColor('tab-ai-2')\">이미지 생성</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li id=\"aieraser-menu\"><a href=\"#Ai-menu3\" id=\"tab-ai-3\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"Ai-menu__a\" onclick=\"changeColor('tab-ai-3')\">객체 변경</a></li>\r\n");
      out.write("\t\t\t\t\t\t\t<li id=\"changeBg-menu\"><a href=\"#Ai-menu4\" id=\"tab-ai-4\"\r\n");
      out.write("\t\t\t\t\t\t\t\tclass=\"Ai-menu__a\" onclick=\"changeColor('tab-ai-4')\">배경 바꾸기</a></li>\r\n");
      out.write("\t\t\t\t\t\t</ul>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"ai-imgEdit modal-body\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<!-- 이미지 편집 플라스크 -->\r\n");
      out.write("\t\t\t\t\t<!-- removeBg -->\r\n");
      out.write("\t\t\t\t\t<div class=\"imageEdit-removeBg\" id=\"Ai-menu1\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"imageEdit-header\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4 class=\"imageEdit-header__h4\">이미지를 업로드하여 본인만의 스티커를 만들어보세요</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"imageEdit-split\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"imageEdit-split6\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<form id=\"imageEdit-removeBg__form\" method=\"post\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\tenctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<input type=\"file\" name=\"image\" class=\"imageUpload_1\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tid=\"for-RemoveBG__file\" multiple=\"multiple\" accept=\"image/*\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tstyle=\"display: none;\" required> <img\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tclass=\"modal-noneImg\" id=\"none_RB\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/EditPage/component/none.jpg\" alt=\"No-uploaded\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"erdiv\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<div class=\"imageEdit-split4\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t<div id=\"for-RemoveBG\" class=\"frame\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tstyle=\"min-width: 6.5em;\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tonclick=\"aiUserUpload('for-RemoveBG')\">사진 가져오기</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<input class=\"Aimodal-btn split6__btn frame\" type=\"submit\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tid=\"imageEdit-removeBg__sub\" value=\"배경 지우기\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<!-- <input class=\"Aimodal-btn split6__btn\" type=\"submit\" id=\"imageEdit-removeBg__sub\" value=\"배경 지우기\"> -->\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t<!-- imageGenerator 생성(Kalo)-->\r\n");
      out.write("\t\t\t\t\t<div class=\"imageEdit-makeImg\" id=\"Ai-menu2\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"imageEdit-header\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4 class=\"imageEdit-header__h4\">생성할 이미지의 텍스트를 영어 또는 한국어로\r\n");
      out.write("\t\t\t\t\t\t\t\t입력해주세요</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"imageEdit-split\" id=\"ie-s2\">\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"imageEdit-split4\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<form id=\"imageEdit-makeImg__form\" method=\"post\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<h4 id=\"makeImg-style\">텍스트를 입력해주세요</h4>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<textarea class=\"imgaeEdit-makeImg__textarea txt-area\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tid=\"makeImg-textarea__pos\" name=\"prompt\"></textarea>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<h4 id=\"makeImg-style\">원하는 스타일</h4>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<select name=\"art_style\" id=\"art_style\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"\">선택 안함</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"by Renoir\">Artist Renoir</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"by Picasso\">Artist Picasso</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"by Gogh\">Artist Gogh</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"by Monet\">Artist Monet</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"Anime\">Anime</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"cartoon\">Cartoon</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"Oriental Painting\">Oriental</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<option value=\"Neon\">Neon</option>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<h4 id=\"makeImg-style\">제외하고 싶은 요소</h4>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<textarea class=\"imgaeEdit-makeImg__textarea\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tid=\"makeImg-textarea__neg\" name=\"negative_prompt\"></textarea>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<!-- 이미지에서 생성하고 싶지 않은 요소 -->\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<input class=\"Aimodal-btn split4__btn\" type=\"submit\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tid=\"imageEdit-makeImg__sub\" value=\"이미지 생성하기\">\r\n");
      out.write("\t\t\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div class=\"imageEdit-split6\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<img class=\"modal-noneImg\" id=\"none_GI\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/EditPage/component/none.jpg\" alt=\"No-uploaded\">\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("            <!--ai 지우개-->\r\n");
      out.write("            <div class=\"imageEdit-changeObject\" id =\"Ai-menu3\">\r\n");
      out.write("               <div class=\"imageEdit-header\">\r\n");
      out.write("                 <h4 class=\"imageEdit-header__h4\">이미지의 요소를 클릭해서 객체 변경 기능을 사용해보세요</h4>\r\n");
      out.write("               </div>\r\n");
      out.write("               \r\n");
      out.write("               <div class=\"imageEdit-split-container\">\r\n");
      out.write("                 <form id=\"imageEdit-changeObject__form\" method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("                   <div class=\"imageEdit-split-img\">\r\n");
      out.write("                     <div id=\"CO-img\">\r\n");
      out.write("                         <img class=\"modal-noneImg\" id=\"none_CO\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/EditPage/component/none.jpg\" alt=\"No-uploaded\">\r\n");
      out.write("                     </div>\r\n");
      out.write("                   </div>\r\n");
      out.write("                     \r\n");
      out.write("                     <div id=\"CO-change\">\r\n");
      out.write("\t\t                <div class=\"imageEdit-split-txt bg-btn\">\r\n");
      out.write("\t\t                  <div id=\"for-changeObject\" class=\"frame\" style=\"min-width: 6.5em;\" onclick=\"aiUserUpload('for-changeObject')\">\r\n");
      out.write("\t\t                    사진 가져오기\r\n");
      out.write("\t\t                  </div>\r\n");
      out.write("                         \r\n");
      out.write("                       <input type=\"file\" name=\"image\" class=\"imageUpload_3\" accept=\"image/*\" id=\"for-changeObject__file\" style=\"display:none;\" required> \r\n");
      out.write("                       <input class=\"Aimodal-btn split6__btn frame\" type=\"submit\" id=\"imageEdit-changeObject_sub\" value=\"객체 변경\">\r\n");
      out.write("\t\t                </div>                     \r\n");
      out.write("                       <div id=\"bg-txt1\">\r\n");
      out.write("\t                       <h4 id=\"bg-style1\">텍스트를 입력해주세요</h4>\r\n");
      out.write("\t                       <textarea name=\"prompt\" id=\"ChnageObject__prompt\"></textarea>\r\n");
      out.write("                       </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                 </form>\r\n");
      out.write("              </div>              \r\n");
      out.write("              </div>\r\n");
      out.write("\t\t\t\t\t<!--배경 바꾸기-->\r\n");
      out.write("\t\t\t\t\t<div class=\"imageEdit-ChangeBg\" id=\"Ai-menu4\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"imageEdit-header\">\r\n");
      out.write("\t\t\t\t\t\t\t<h4 class=\"imageEdit-header__h4\">이미지의 요소를 클릭하고 이미지의 배경을\r\n");
      out.write("\t\t\t\t\t\t\t\t바꿔보세요</h4>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t<div class=\"imageEdit-split-container\">\r\n");
      out.write("\t\t\t\t\t\t\t<form method=\"post\" id=\"imageEdit-bgChange__form\"\r\n");
      out.write("\t\t\t\t\t\t\t\tenctype=\"multipart/form-data\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"imageEdit-split-img\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div id=\"CB-img\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<img class=\"modal-noneImg\" id=\"none_CB\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tsrc=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${awsPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/EditPage/component/none.jpg\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\talt=\"No-uploaded\" id=\"for-changeBG__file\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<div id=\"BG-change\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div class=\"imageEdit-split-txt bg-btn\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<div id=\"for-changeBG\" class=\"frame\" style=\"min-width: 6.5em;\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tonclick=\"aiUserUpload('for-changeBG')\">사진 가져오기</div>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<input type=\"file\" name=\"image\" class=\"imageUpload_4\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tid=\"for-changeBG__file\" multiple=\"multiple\" accept=\"image/*\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tstyle=\"display: none;\" required> <input\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tclass=\"Aimodal-btn split6__btn frame\" type=\"submit\"\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tid=\"imageEdit-bgChange_sub\" value=\"배경 바꾸기\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div id=\"bg-txt2\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<h4 id=\"bg-style2\">배경 텍스트를 입력해주세요</h4>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<textarea name=\"prompt\" id=\"ChangeBg__prompt\"></textarea>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t<!--modal-body 끝-->\r\n");
      out.write("\t\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t\t<button id=\"aiImgUpload_btn\" class=\"Aimodal-footer__btn\"\r\n");
      out.write("\t\t\t\t\t\tonclick=\"aiImgUpload()\" type=\"button\" data-bs-dismiss=\"modal\">확인</button>\r\n");
      out.write("\t\t\t\t\t<button id=\"close-btn\" type=\"button\" data-bs-dismiss=\"modal\">취소</button>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!--modal content 끝-->\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!--  aiModal 끝 -->\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("            \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("<!-- js -->\r\n");
      out.write("<script>\r\n");
      out.write("//튜토리얼 모달창\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\t   if (localStorage.getItem('noShowModal') !== 'true') {\r\n");
      out.write("\t       $(\"#guide_Modal\").show();\r\n");
      out.write("\t   }\r\n");
      out.write("});\r\n");
      out.write("\t//\"편집 시작하기\" 버튼에 클릭 이벤트 리스너를 추가합니다.\r\n");
      out.write("\tdocument.querySelector('.centered-button').addEventListener('click', function() {\r\n");
      out.write("\t  // \"더 이상 보지 않고 숨기기\" 체크박스의 상태를 확인합니다.\r\n");
      out.write("\t  var noShowChecked = document.getElementById(\"noShowAgain\").checked;\r\n");
      out.write("\t  if (noShowChecked) {\r\n");
      out.write("\t    // 체크박스가 선택되어 있으면 로컬 스토리지에 상태를 저장합니다.\r\n");
      out.write("\t    localStorage.setItem('noShowModal', 'true');\r\n");
      out.write("\t  }\r\n");
      out.write("\t  // 모달을 숨깁니다.\r\n");
      out.write("\t  $(\"#guide_Modal\").hide();\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 페이지 로드 시 로컬 스토리지를 확인하여 모달을 표시할지 결정하는 함수\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t  if (localStorage.getItem('noShowModal') !== 'true') {\r\n");
      out.write("\t    $(\"#guide_Modal\").show();\r\n");
      out.write("\t  }\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("    // 각 <a> 태그에 클릭 이벤트 리스너 추가\r\n");
      out.write("    document.querySelectorAll('#img-edit-tool a').forEach(function(link) {\r\n");
      out.write("      link.addEventListener('click', function(event) {\r\n");
      out.write("        event.preventDefault(); // 기본 이벤트 방지\r\n");
      out.write("\r\n");
      out.write("        // 클릭된 <a> 태그의 href 속성값을 가져옴\r\n");
      out.write("        var targetId = this.getAttribute('href').substr(1);\r\n");
      out.write("\r\n");
      out.write("        // 모든 탭을 숨김\r\n");
      out.write("        document.querySelectorAll('.tab-content > div').forEach(function(tab) {\r\n");
      out.write("          tab.classList.remove('active', 'show');\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 클릭된 탭만 보이도록 설정\r\n");
      out.write("        document.getElementById(targetId).classList.add('active', 'show');\r\n");
      out.write("      });\r\n");
      out.write("    });\r\n");
      out.write("  });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- 그림판 기능 -->\r\n");
      out.write("<script src=\"https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.5.0/fabric.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// canvas 정의\r\n");
      out.write("var canvas = new fabric.Canvas('main-canvas');\r\n");
      out.write("\r\n");
      out.write("//반응형 캔버스\r\n");
      out.write("function resizeCanvas() {\r\n");
      out.write("    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n");
      out.write("    var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n");
      out.write("\r\n");
      out.write("    // CSS 미디어 쿼리에 따라 적절한 캔버스 크기를 결정합니다.\r\n");
      out.write("    if (width <= 320) {\r\n");
      out.write("        // 스마트폰 세로\r\n");
      out.write("        canvas.setWidth(width * 0.5);\r\n");
      out.write("        canvas.setHeight(height * 0.55);\r\n");
      out.write("    } else if (width <= 767) {\r\n");
      out.write("        // 태블릿 세로\r\n");
      out.write("        canvas.setWidth(width * 0.5);\r\n");
      out.write("        canvas.setHeight(height * 0.55);\r\n");
      out.write("    }  // 스마트폰 가로 모드\r\n");
      out.write("    if (width <= 767 && height < width) {\r\n");
      out.write("        canvas.setWidth(height * 0.5);\r\n");
      out.write("        canvas.setHeight(height * 0.55);\r\n");
      out.write("    }\r\n");
      out.write("    // 태블릿 가로 모드\r\n");
      out.write("    else if (width >= 768 && width <= 1365 && height < width) {\r\n");
      out.write("        canvas.setWidth(width * 0.5);\r\n");
      out.write("        canvas.setHeight(height * 0.55);\r\n");
      out.write("    }\r\n");
      out.write("    // iPad Pro 가로, 데스크탑\r\n");
      out.write("    else if (width >= 1366 && width <= 1599) {\r\n");
      out.write("        canvas.setWidth(width * 0.5);\r\n");
      out.write("        canvas.setHeight(height * 0.55);\r\n");
      out.write("    }\r\n");
      out.write("    // 큰 모니터 16:9\r\n");
      out.write("    else if (width >= 1600) {\r\n");
      out.write("        canvas.setWidth(width * 0.6);\r\n");
      out.write("        canvas.setHeight(height * 0.65);\r\n");
      out.write("    }\r\n");
      out.write("    // 객체들의 스케일을 조정할 수 있습니다.\r\n");
      out.write("    // 예를 들어, 캔버스 크기가 변경되었을 때 모든 객체들의 스케일을 조정하려면\r\n");
      out.write("    // 여기에 캔버스 객체들을 반복하면서 스케일을 조정하는 로직을 추가합니다.\r\n");
      out.write("\r\n");
      out.write("    canvas.renderAll();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("// 특정 링크의 색상을 변경하는 함수\r\n");
      out.write("function changeColor(category) {\r\n");
      out.write("    // 모든 링크의 색상을 초기화\r\n");
      out.write("    resetColors();\r\n");
      out.write("\r\n");
      out.write("    // 클릭된 링크의 색상을 변경\r\n");
      out.write("    document.getElementById(category).style.color = '#00315c';\r\n");
      out.write("    document.getElementById(category).style.fontWeight = 'bolder';\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("//모든 링크의 색상을 초기화하는 함수\r\n");
      out.write("function resetColors() {\r\n");
      out.write("    var categories = ['tab-1', 'tab-2', 'tab-4', 'tab-ai-1', 'tab-ai-2', 'tab-ai-3', 'tab-ai-4'];\r\n");
      out.write("    categories.forEach(function (category) {\r\n");
      out.write("        document.getElementById(category).style.color = '#000000';\r\n");
      out.write("        document.getElementById(category).style.fontWeight = '200';\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  // 콜랩스 버튼 active  \r\n");
      out.write("  function removeActive() {\r\n");
      out.write("    document.querySelectorAll('button').forEach(function(btn) {\r\n");
      out.write("        btn.classList.remove('active-button');\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("  \r\n");
      out.write("  document.querySelectorAll('button').forEach(function(button) {\r\n");
      out.write("\t    button.addEventListener('click', function() {\r\n");
      out.write("\t        // 모든 버튼에서 active-button 클래스 제거\r\n");
      out.write("\t\t\tremoveActive();\r\n");
      out.write("\r\n");
      out.write("\t        // 현재 클릭된 버튼에 active-button 클래스 추가\r\n");
      out.write("\t        this.classList.add('active-button');\r\n");
      out.write("\t    });\r\n");
      out.write("\t}); \r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("// 그림판 기능\r\n");
      out.write("document.addEventListener('DOMContentLoaded', function () {\r\n");
      out.write("\t\r\n");
      out.write("     const ctx = canvas.getContext('2d');\r\n");
      out.write("     var imageContainer = document.getElementById('image-container');\r\n");
      out.write("     var uploadInput = document.getElementById('image-upload');\r\n");
      out.write("     var propertiesPanel = document.getElementById('properties-panel'); // 편집 옵션을 담은 패널의 ID\r\n");
      out.write("     var photoButton = document.getElementById('photo-button');\r\n");
      out.write("     var backgroundButton = document.getElementById('background-button');\r\n");
      out.write("     var bgContainer = document.getElementById('bg-container');\r\n");
      out.write("     var bgUploadInput = document.getElementById('background-upload');\r\n");
      out.write("     var isDrawingMode = false;\r\n");
      out.write("     var undoStack = [];\r\n");
      out.write("     var redoStack = [];\r\n");
      out.write("     var prevButton = document.getElementById('prev-button');\r\n");
      out.write("     var nextButton = document.getElementById('next-button'); // 다음 버튼 요소 가져오기\r\n");
      out.write("     var textButton = document.getElementById('text-button'); // 텍스트 버튼 요소 가져오기\r\n");
      out.write("     var isTextMode = false; // 텍스트 모드 상태 변수\r\n");
      out.write("     var activeText = null;\r\n");
      out.write("\r\n");
      out.write("     \r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("/*      // 캔버스 기본 배경색 설정 \r\n");
      out.write("     canvas.backgroundColor = 'white';\r\n");
      out.write("     canvas.renderAll();  // 변경사항 저장 */\r\n");
      out.write("\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     // 페인트\r\n");
      out.write("     var fillColorPicker = document.getElementById('paint-color');\r\n");
      out.write("     var changeFillColorButton = document.getElementById('paint-btn');\r\n");
      out.write("     var isPaintMode = false;  // 페인트 기능(비활성화)\r\n");
      out.write("     \r\n");
      out.write("     // 페인트 - 배경\r\n");
      out.write("     function fillBackground(options){        \r\n");
      out.write("         if (!options.target) { \r\n");
      out.write("            // 아무 객체도 선택되지 않은 경우     \r\n");
      out.write("            if(isPaintMode){\r\n");
      out.write("               // 페인트 활성화\r\n");
      out.write("                var selectedColor = fillColorPicker.value;\r\n");
      out.write("                canvas.backgroundColor = selectedColor;\r\n");
      out.write("                canvas.renderAll();             \r\n");
      out.write("            }\r\n");
      out.write("         } \r\n");
      out.write("     }     \r\n");
      out.write("     \r\n");
      out.write("     // 페인트 기능 수행\r\n");
      out.write("     changeFillColorButton.addEventListener('click', function() {\r\n");
      out.write("        \r\n");
      out.write("         var selectedColor = fillColorPicker.value;\r\n");
      out.write("         var activeObject = canvas.getActiveObject();\r\n");
      out.write("        isPaintMode = !isPaintMode; // 페인트 모드 상태 토글\r\n");
      out.write("      \r\n");
      out.write("         if(isPaintMode){\r\n");
      out.write("            // 페인트 활성화\r\n");
      out.write("            canvas.on('mouse:down', fillBackground); // 배경채우기 함수\r\n");
      out.write("            activeObject.set('fill', selectedColor);\r\n");
      out.write("            canvas.renderAll();       \r\n");
      out.write("            \r\n");
      out.write("         }else{\r\n");
      out.write("            canvas.off('mouse:down', fillBackground);\r\n");
      out.write("         }\r\n");
      out.write("         \r\n");
      out.write("     });  \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write(" \r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("   // 텍스트 및 폰트\r\n");
      out.write("     document.getElementById('font-upload').addEventListener('change', function(e) {\r\n");
      out.write("          var file = e.target.files[0];\r\n");
      out.write("          if (file) {\r\n");
      out.write("              var reader = new FileReader();\r\n");
      out.write("              reader.onload = function(event) {\r\n");
      out.write("                  var fontData = event.target.result;\r\n");
      out.write("                  applyFont(file.name, fontData);\r\n");
      out.write("              };\r\n");
      out.write("              reader.readAsDataURL(file);\r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("      function applyFont(fontName, fontData) {\r\n");
      out.write("          // 폰트 스타일 적용\r\n");
      out.write("          var styleNode = document.createElement('style');\r\n");
      out.write("          styleNode.type = 'text/css';\r\n");
      out.write("          var fontFaceRule = `\r\n");
      out.write("              @font-face {\r\n");
      out.write("                  font-family: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fontName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("                  src: url('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${fontData}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("') format('truetype');\r\n");
      out.write("              }\r\n");
      out.write("          `;\r\n");
      out.write("          styleNode.textContent = fontFaceRule;\r\n");
      out.write("          document.head.appendChild(styleNode);\r\n");
      out.write("\r\n");
      out.write("          // 현재 선택된 텍스트 박스에 폰트 적용\r\n");
      out.write("          updateSelectedTextboxFont(fontName);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      function updateSelectedTextboxFont(fontName) {\r\n");
      out.write("          var activeObject = canvas.getActiveObject();\r\n");
      out.write("          if (activeObject && activeObject.type === 'textbox') {\r\n");
      out.write("              activeObject.set('fontFamily', fontName);\r\n");
      out.write("              canvas.renderAll();\r\n");
      out.write("          }\r\n");
      out.write("      }\r\n");
      out.write("     \r\n");
      out.write("      \r\n");
      out.write("     document.getElementById('font-family-selector').addEventListener('change', function(e) {\r\n");
      out.write("          var selectedFontFamily = e.target.value;\r\n");
      out.write("          var activeObject = canvas.getActiveObject();\r\n");
      out.write("\r\n");
      out.write("          // 활성화된 객체가 텍스트 박스인 경우에만 글씨체 변경\r\n");
      out.write("          if (activeObject && (activeObject.type === 'text' || activeObject.type === 'i-text' || activeObject.type === 'textbox')) {\r\n");
      out.write("              activeObject.set('fontFamily', selectedFontFamily);\r\n");
      out.write("              canvas.renderAll();\r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("        \r\n");
      out.write("     document.getElementById('text-color-picker').addEventListener('input', function(e) {\r\n");
      out.write("          var selectedColor = e.target.value;\r\n");
      out.write("          var activeObject = canvas.getActiveObject();\r\n");
      out.write("\r\n");
      out.write("          // 활성화된 객체가 텍스트 관련 객체인 경우에만 색상 변경\r\n");
      out.write("          if (activeObject && (activeObject.type === 'text' || activeObject.type === 'i-text' || activeObject.type === 'textbox')) {\r\n");
      out.write("              activeObject.set('fill', selectedColor);\r\n");
      out.write("              canvas.renderAll();\r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("      // 텍스트 도구 활성화 함수\r\n");
      out.write("     function enableTextMode() {\r\n");
      out.write("         isTextMode = true;\r\n");
      out.write("         canvas.discardActiveObject(); // 선택된 객체 취소\r\n");
      out.write("         canvas.requestRenderAll();\r\n");
      out.write("         activeText = null; // 새로운 텍스트 상자 생성을 위해 activeText 초기화\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("     // 텍스트 버튼 클릭 이벤트 핸들러\r\n");
      out.write("     textButton.addEventListener('click', function () {\r\n");
      out.write("         enableTextMode();\r\n");
      out.write("     });\r\n");
      out.write("\r\n");
      out.write("     // 캔버스 클릭 이벤트 핸들러\r\n");
      out.write("     canvas.on('mouse:down', function (options) {\r\n");
      out.write("    if (isTextMode) {\r\n");
      out.write("        var pointer = canvas.getPointer(options.e);\r\n");
      out.write("        if (!activeText) {\r\n");
      out.write("            // 활성화된 텍스트 상자가 없을 때만 새로운 텍스트 상자 생성\r\n");
      out.write("            activeText = new fabric.Textbox('텍스트 입력', {\r\n");
      out.write("                left: pointer.x,\r\n");
      out.write("                top: pointer.y,\r\n");
      out.write("                fontFamily: 'Arial',\r\n");
      out.write("                fill: 'black',\r\n");
      out.write("            });\r\n");
      out.write("            canvas.add(activeText);\r\n");
      out.write("            canvas.setActiveObject(activeText);\r\n");
      out.write("            canvas.requestRenderAll();\r\n");
      out.write("        }\r\n");
      out.write("    } else {\r\n");
      out.write("        // 텍스트 모드가 아닐 때, 다른 작업 수행\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    // 텍스트 모드 비활성화\r\n");
      out.write("    disableTextMode();\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("    // 텍스트 입력 모드 비활성화 함수\r\n");
      out.write("    function disableTextMode() {\r\n");
      out.write("        isTextMode = false;\r\n");
      out.write("        activeText = null; // 활성화된 텍스트 상자 초기화\r\n");
      out.write("    }\r\n");
      out.write("   \r\n");
      out.write("    // 캔버스 클릭 이벤트 핸들러: 텍스트 모드 비활성화\r\n");
      out.write("    canvas.on('mouse:down', function () {\r\n");
      out.write("        disableTextMode();\r\n");
      out.write("    });     \r\n");
      out.write("       \r\n");
      out.write("     ///// 텍스트 끝 /////\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     // 앞으로 가져오기\r\n");
      out.write("     document.getElementById('bring-to-front-button').addEventListener('click', function() {\r\n");
      out.write("        event.preventDefault();  // 기본 이벤트를 방지합니다.\r\n");
      out.write("        event.stopPropagation(); // 이벤트 버블링을 막습니다.  \r\n");
      out.write("        \r\n");
      out.write("        var activeObject = canvas.getActiveObject();\r\n");
      out.write("        if (activeObject) {\r\n");
      out.write("             canvas.bringForward(activeObject);\r\n");
      out.write("             \r\n");
      out.write("         }\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("     // 뒤로 보내기\r\n");
      out.write("      document.getElementById('send-to-back-button').addEventListener('click', function() {\r\n");
      out.write("         event.preventDefault();  // 기본 이벤트를 방지합니다.\r\n");
      out.write("          event.stopPropagation(); // 이벤트 버블링을 막습니다.\r\n");
      out.write("          \r\n");
      out.write("          var activeObject = canvas.getActiveObject();\r\n");
      out.write("          if (activeObject) {\r\n");
      out.write("              canvas.sendBackwards(activeObject);\r\n");
      out.write("              \r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     // 지우개\r\n");
      out.write("     document.getElementById('eraser-button').addEventListener('click', function() {\r\n");
      out.write("          // 그리기 모드 활성화\r\n");
      out.write("          canvas.isDrawingMode = true;\r\n");
      out.write("\r\n");
      out.write("          // 지우개와 같은 효과를 내기 위해 선의 색상을 캔버스의 배경 색상으로 설정\r\n");
      out.write("        canvas.freeDrawingBrush.color = canvas.backgroundColor || 'white';\r\n");
      out.write("          canvas.freeDrawingBrush.width = 10; // 지우개의 두께 설정\r\n");
      out.write("          \r\n");
      out.write("      });\r\n");
      out.write("     \r\n");
      out.write("     // 지우개 두께\r\n");
      out.write("     document.getElementById('eraser-size-slider').addEventListener('input', function(e) {\r\n");
      out.write("          var eraserSize = parseInt(e.target.value, 10);\r\n");
      out.write("          // 지우개 모드가 활성화된 경우에만 두께 업데이트\r\n");
      out.write("          if (canvas.isDrawingMode && canvas.freeDrawingBrush.color === (canvas.backgroundColor || 'white')) {\r\n");
      out.write("              canvas.freeDrawingBrush.width = eraserSize;\r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("      // 삭제 버튼 이벤트 핸들러 (버튼 클릭)\r\n");
      out.write("      document.getElementById('delete-button').addEventListener('click', function(event) {\r\n");
      out.write("       event.preventDefault();  // 기본 이벤트를 방지합니다.\r\n");
      out.write("       event.stopPropagation(); // 이벤트 버블링을 막습니다.\r\n");
      out.write("   \r\n");
      out.write("       var activeObject = canvas.getActiveObject();\r\n");
      out.write("       if (activeObject) {\r\n");
      out.write("           canvas.remove(activeObject);\r\n");
      out.write("       }\r\n");
      out.write("   });\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("      document.addEventListener('keydown', function(event) {\r\n");
      out.write("          // 키보드 이벤트 중에서 'Delete' 키를 눌렀을 때만 처리\r\n");
      out.write("          if (event.key === 'Delete') {\r\n");
      out.write("              event.preventDefault();  // 기본 이벤트를 방지합니다.\r\n");
      out.write("              event.stopPropagation(); // 이벤트 버블링을 막습니다.\r\n");
      out.write("      \r\n");
      out.write("              var activeObject = canvas.getActiveObject();\r\n");
      out.write("              if (activeObject) {\r\n");
      out.write("                  // 선택된 객체가 여러 개인지 확인합니다.\r\n");
      out.write("                  if (activeObject.type === 'activeSelection') {\r\n");
      out.write("                      // activeSelection 내의 모든 객체를 반복하여 삭제합니다.\r\n");
      out.write("                      activeObject.forEachObject(function(obj) {\r\n");
      out.write("                          canvas.remove(obj);\r\n");
      out.write("                      });\r\n");
      out.write("                      // 그룹을 해체합니다.\r\n");
      out.write("                      canvas.discardActiveObject();\r\n");
      out.write("                  } else {\r\n");
      out.write("                      // 단일 객체를 삭제합니다.\r\n");
      out.write("                      canvas.remove(activeObject);\r\n");
      out.write("                  }\r\n");
      out.write("                  canvas.requestRenderAll(); // 캔버스를 다시 렌더링합니다.\r\n");
      out.write("              }\r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("   \r\n");
      out.write("      \r\n");
      out.write("     \r\n");
      out.write("   // 사진 추가\r\n");
      out.write("     document.getElementById('photo-upload-button').addEventListener('click', function () {\r\n");
      out.write("    \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \t canvas.requestRenderAll();\r\n");
      out.write("    \t \r\n");
      out.write("         // 파일 업로드 버튼 클릭\r\n");
      out.write("         document.getElementById('image-upload').click();\r\n");
      out.write("     });\r\n");
      out.write("          \r\n");
      out.write("     // 이미지를 Canvas에 추가하는 함수\r\n");
      out.write("     function addImageToCanvas(imgElement) {\r\n");
      out.write("       fabric.Image.fromURL(imgElement.src, function (oImg) {\r\n");
      out.write("         canvas.add(oImg).renderAll();\r\n");
      out.write("         // 이미지를 선택하면 편집 옵션 패널을 표시\r\n");
      out.write("         propertiesPanel.style.display = 'block';\r\n");
      out.write("         // 선택된 객체의 속성을 패널에 표시할 수 있습니다.\r\n");
      out.write("         // 예: propertiesPanel.querySelector('.width').textContent = oImg.getScaledWidth();\r\n");
      out.write("       });\r\n");
      out.write("     }\r\n");
      out.write("        \r\n");
      out.write("     uploadInput.addEventListener('change', function (e) {\r\n");
      out.write("         var files = e.target.files;\r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("         for (var i = 0; i < files.length; i++) {\r\n");
      out.write("           (function (file) {\r\n");
      out.write("             var reader = new FileReader();\r\n");
      out.write("             reader.onload = function (e) {\r\n");
      out.write("               var img = new Image();\r\n");
      out.write("               img.src = e.target.result;\r\n");
      out.write("               img.style.maxHeight = '5.7em';\r\n");
      out.write("               img.style.marginLeft = '2em';\r\n");
      out.write("               img.style.cursor='pointer';\r\n");
      out.write("               img.onclick = function () {\r\n");
      out.write("                 // 이미지 클릭 시 Canvas에 추가\r\n");
      out.write("                 addImageToCanvas(img);\r\n");
      out.write("               };\r\n");
      out.write("               imageContainer.appendChild(img);\r\n");
      out.write("             };\r\n");
      out.write("             reader.readAsDataURL(file);\r\n");
      out.write("           })(files[i]);\r\n");
      out.write("         }\r\n");
      out.write("       });     \r\n");
      out.write(" \r\n");
      out.write("     // 이미지 추가 끝 ---------------\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     // 자르기 \r\n");
      out.write("\r\n");
      out.write("   let selectedImage = null;\r\n");
      out.write("   let cropper;\r\n");
      out.write("   \r\n");
      out.write("   canvas.on('selection:created', function(e) {\r\n");
      out.write("       if (e.target.type === 'image') {\r\n");
      out.write("           selectedImage = e.target;\r\n");
      out.write("       }\r\n");
      out.write("   });\r\n");
      out.write("   \r\n");
      out.write("   document.getElementById('crop-button').addEventListener('click', function() {\r\n");
      out.write("       if (!selectedImage) {\r\n");
      out.write("           alert('이미지를 선택해주세요!');\r\n");
      out.write("           removeActive();\r\n");
      out.write("           return;\r\n");
      out.write("       }\r\n");
      out.write("   \r\n");
      out.write("       // Cropper 초기화\r\n");
      out.write("       if (cropper) {\r\n");
      out.write("           cropper.destroy();\r\n");
      out.write("       }\r\n");
      out.write("       \r\n");
      out.write("       // 모달에 이미지 표시\r\n");
      out.write("       var imgElement = selectedImage.getElement();\r\n");
      out.write("       var modalImage = document.getElementById('modalImage');\r\n");
      out.write("       modalImage.src = imgElement.src;\r\n");
      out.write("   \r\n");
      out.write("       // 부트스트랩 모달 표시\r\n");
      out.write("       var cropModal = new bootstrap.Modal(document.getElementById('cropModal'));\r\n");
      out.write("       cropModal.show();\r\n");
      out.write("          \r\n");
      out.write("       \r\n");
      out.write("       cropper = new Cropper(modalImage, {\r\n");
      out.write("           // cropper 세부 기능 설정\r\n");
      out.write("           aspectRatio: NaN,\r\n");
      out.write("           viewMode: 1,\r\n");
      out.write("           data: {\r\n");
      out.write("               width: 400,\r\n");
      out.write("               height: 300\r\n");
      out.write("           },\r\n");
      out.write("           minContainerWidth: 400,   // 컨테이너 최소 너비\r\n");
      out.write("           minContainerHeight: 400,  // 컨테이너 최소 높이\r\n");
      out.write("       });\r\n");
      out.write("   });\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   document.getElementById('confirmCrop').addEventListener('click', function() {\r\n");
      out.write("       if (cropper) {\r\n");
      out.write("           // Cropped 이미지를 캔버스로 가져오기\r\n");
      out.write("           var croppedCanvas = cropper.getCroppedCanvas();\r\n");
      out.write("           var croppedImg = new Image();\r\n");
      out.write("           croppedImg.src = croppedCanvas.toDataURL();\r\n");
      out.write("   \r\n");
      out.write("           croppedImg.onload = function() {\r\n");
      out.write("               // 새로운 fabric.Image 객체 생성 및 캔버스에 추가\r\n");
      out.write("               var fabricImage = new fabric.Image(croppedImg, {\r\n");
      out.write("                   left: selectedImage.left,\r\n");
      out.write("                   top: selectedImage.top\r\n");
      out.write("               });\r\n");
      out.write("               canvas.remove(selectedImage);\r\n");
      out.write("               canvas.add(fabricImage);\r\n");
      out.write("   \r\n");
      out.write("               // Cropper 인스턴스 제거\r\n");
      out.write("               cropper.destroy();\r\n");
      out.write("               cropper = null;\r\n");
      out.write("   \r\n");
      out.write("               // 모달 숨기기\r\n");
      out.write("               var cropModal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));\r\n");
      out.write("               cropModal.hide();\r\n");
      out.write("           };\r\n");
      out.write("       }\r\n");
      out.write("  \t  canvas.discardActiveObject(); // 선택된 객체 초기화\r\n");
      out.write("\t  canvas.requestRenderAll();\r\n");
      out.write("   });\r\n");
      out.write("   \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("        \r\n");
      out.write("       \r\n");
      out.write("     //배경이미지 추가\r\n");
      out.write("     document.getElementById('bg-upload-button').addEventListener('click', function () {\r\n");
      out.write("    \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \t canvas.requestRenderAll();\r\n");
      out.write("         // 파일 업로드 버튼 클릭\r\n");
      out.write("         document.getElementById('background-upload').click();\r\n");
      out.write("     });\r\n");
      out.write("     \r\n");
      out.write("      function setCanvasBackground(imgElement) {\r\n");
      out.write("         // 이미지의 src 속성이 \"upload.png\"가 아닌 경우에만 동작\r\n");
      out.write("         var img = new Image();\r\n");
      out.write("         img.src = imgElement.src;\r\n");
      out.write("         \r\n");
      out.write("        if (imgElement.src.includes(\"upload.png\")) {\r\n");
      out.write("          return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("          img.onload = function () {\r\n");
      out.write("              canvas.setBackgroundImage(imgElement.src, canvas.renderAll.bind(canvas), {\r\n");
      out.write("                  scaleX: canvas.width / img.width,\r\n");
      out.write("                  scaleY: canvas.height / img.height,\r\n");
      out.write("                  top: 0,\r\n");
      out.write("                  left: 0\r\n");
      out.write("              });\r\n");
      out.write("          };\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      bgContainer.addEventListener('click', function (e) {\r\n");
      out.write("          var clickedImage = e.target;\r\n");
      out.write("          // 클릭한 이미지를 canvas의 배경으로 설정\r\n");
      out.write("          setCanvasBackground(clickedImage);\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("      // 배경이미지를 Canvas에 추가하는 함수 (이미지 추가와 배경 설정을 분리)\r\n");
      out.write("      function addImageToCanvas(imgElement) {\r\n");
      out.write("          fabric.Image.fromURL(imgElement.src, function (oImg) {\r\n");
      out.write("              canvas.add(oImg).renderAll();\r\n");
      out.write("              // 이미지를 선택하면 편집 옵션 패널을 표시\r\n");
      out.write("              propertiesPanel.style.display = 'block';\r\n");
      out.write("              // 선택된 객체의 속성을 패널에 표시할 수 있습니다.\r\n");
      out.write("              // 예: propertiesPanel.querySelector('.width').textContent = oImg.getScaledWidth();\r\n");
      out.write("          });\r\n");
      out.write("      }\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     bgUploadInput.addEventListener('change', function (e) {\r\n");
      out.write("          var files = e.target.files;\r\n");
      out.write("          \r\n");
      out.write("          for (var i = 0; i < files.length; i++) {\r\n");
      out.write("            (function (file) {\r\n");
      out.write("              var reader = new FileReader();\r\n");
      out.write("              reader.onload = function (e) {\r\n");
      out.write("                var img = new Image();\r\n");
      out.write("                img.src = e.target.result;\r\n");
      out.write("                img.style.height = '5.7em';\r\n");
      out.write("                img.style.marginLeft = '2em';\r\n");
      out.write("                img.style.cursor='pointer';\r\n");
      out.write("                img.onclick = function () {\r\n");
      out.write("                  // 이미지 클릭 시 Canvas에 추가 (배경)\r\n");
      out.write("                  setCanvasBackground(img);\r\n");
      out.write("                };\r\n");
      out.write("                bgContainer.appendChild(img);\r\n");
      out.write("              };\r\n");
      out.write("              reader.readAsDataURL(file);\r\n");
      out.write("            })(files[i]);\r\n");
      out.write("          }\r\n");
      out.write("        });\r\n");
      out.write("     \r\n");
      out.write("\r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     // 이전으로 돌아가는 함수\r\n");
      out.write("     function undo() {\r\n");
      out.write("         if (undoStack.length > 0) {\r\n");
      out.write("             var previousState = undoStack.pop(); // 스택에서 이전 상태를 팝\r\n");
      out.write("             redoStack.push(JSON.stringify(canvas.toDatalessJSON())); // 현재 상태를 다음 행동 스택에 저장\r\n");
      out.write("             canvas.loadFromJSON(previousState); // 이전 상태로 canvas 복원\r\n");
      out.write("             canvas.renderAll(); // canvas 다시 그리기\r\n");
      out.write("         }\r\n");
      out.write("         // 버튼 상태 업데이트\r\n");
      out.write("         updateButtonState();\r\n");
      out.write("     }\r\n");
      out.write("     \r\n");
      out.write("     // 다음으로 이동하는 함수\r\n");
      out.write("     function redo() {\r\n");
      out.write("         if (redoStack.length > 0) {\r\n");
      out.write("             var nextState = redoStack.pop(); // 스택에서 다음 상태를 팝\r\n");
      out.write("             undoStack.push(JSON.stringify(canvas.toDatalessJSON())); // 현재 상태를 이전 행동 스택에 저장\r\n");
      out.write("             canvas.loadFromJSON(nextState); // 다음 상태로 canvas 복원\r\n");
      out.write("             canvas.renderAll(); // canvas 다시 그리기\r\n");
      out.write("         }\r\n");
      out.write("         // 버튼 상태 업데이트\r\n");
      out.write("         updateButtonState();\r\n");
      out.write("     }     \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("  \r\n");
      out.write("     \r\n");
      out.write("     \r\n");
      out.write("     // 그리기 모드\r\n");
      out.write("     function toggleDrawingMode() {\r\n");
      out.write("        isDrawingMode = !isDrawingMode;\r\n");
      out.write("        if (isDrawingMode) {\r\n");
      out.write("          // 그리기 모드가 활성화되면 마우스로 그림을 그릴 수 있도록 설정\r\n");
      out.write("          canvas.isDrawingMode = true;\r\n");
      out.write("        } else {\r\n");
      out.write("          // 그리기 모드가 비활성화되면 그리기 모드를 해제\r\n");
      out.write("          canvas.isDrawingMode = false;\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("     \r\n");
      out.write("      // 그리기 버튼 클릭 이벤트 핸들러\r\n");
      out.write("      document.getElementById('start-drawing-button').addEventListener('click', function () {\r\n");
      out.write("     \tcanvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \tcanvas.requestRenderAll();\r\n");
      out.write("        toggleDrawingMode();\r\n");
      out.write("        \r\n");
      out.write("        // 지우개 -> 그리기 펜 변경 (색상, 두께)\r\n");
      out.write("        if (canvas.freeDrawingBrush.color === canvas.backgroundColor){\r\n");
      out.write("           canvas.freeDrawingBrush.color = document.getElementById('line-color').value;  // 펜 컬러 불러오기               \r\n");
      out.write("           /* canvas.freeDrawingBrush.width = document.getElementById('line-width').value; */                    \r\n");
      out.write("        }\r\n");
      out.write("      });\r\n");
      out.write("      \r\n");
      out.write("  \r\n");
      out.write("   // 키보드 esc 감지 시 그리기/텍스트 모드 취소  \r\n");
      out.write("      document.addEventListener('keydown', function (event) {\r\n");
      out.write("        if (event.key === 'Escape') {\r\n");
      out.write("          // 'Esc' 키를 누르면 그리기 모드 비활성화\r\n");
      out.write("          isDrawingMode = false;\r\n");
      out.write("          canvas.isDrawingMode = false;\r\n");
      out.write("\r\n");
      out.write("          disableTextMode();  // 텍스트 모드 비활성화\r\n");
      out.write("          \r\n");
      out.write("     \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \t canvas.requestRenderAll();\r\n");
      out.write("          \r\n");
      out.write("          $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("          resetColors();  // 콜랩스 색상 초기화\r\n");
      out.write("          removeActive(); // 콜랩스 active 초기화\r\n");
      out.write("        }\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   // canvas 밖 클릭시 그리기 모드 취소 \r\n");
      out.write("      document.addEventListener('click', function (event) {\r\n");
      out.write("        // 클릭된 요소가 #canvas-container인지 확인\r\n");
      out.write("        const canvasContainer = document.getElementById('canvas-container');\r\n");
      out.write("        const toolContainer = document.getElementById('tool-container');\r\n");
      out.write("        \r\n");
      out.write("        if (!canvasContainer.contains(event.target) && !toolContainer.contains(event.target)) {\r\n");
      out.write("          // #canvas-container, #toolContainer 외의 부분 클릭하면 그리기 모드 비활성화\r\n");
      out.write("          isDrawingMode = false;\r\n");
      out.write("          canvas.isDrawingMode = false;\r\n");
      out.write("          \r\n");
      out.write("          // 텍스트 모드 비활성화\r\n");
      out.write("          disableTextMode();\r\n");
      out.write("          \r\n");
      out.write("     \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \t canvas.requestRenderAll();\r\n");
      out.write("     \t \r\n");
      out.write("          $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("          resetColors();  // 콜랩스 색상 초기화\r\n");
      out.write("          removeActive(); // 콜랩스 active 초기화\r\n");
      out.write("        }\r\n");
      out.write("      });\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("     // 초기화 버튼\r\n");
      out.write("      document.getElementById('reset-button').addEventListener('click', function () {\r\n");
      out.write("          // 사용자에게 확인 메시지 표시\r\n");
      out.write("          var confirmReset = confirm(\"초기화하시겠습니까? 이 작업은 현재까지의 그림을 모두 지우고 새로 시작합니다.\");\r\n");
      out.write("\r\n");
      out.write("          // 사용자가 \"예\"를 선택한 경우에만 초기화 실행\r\n");
      out.write("          if (confirmReset) {\r\n");
      out.write("              // canvas를 완전히 비우기\r\n");
      out.write("              canvas.clear();\r\n");
      out.write("              // 캔버스 기본 배경색 설정 \r\n");
      out.write("              canvas.backgroundColor = 'white';\r\n");
      out.write("              canvas.renderAll();  // 변경사항 저장\r\n");
      out.write("          }\r\n");
      out.write("              removeActive(); // 콜랩스 active 초기화\r\n");
      out.write("      });\r\n");
      out.write("     \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      // 이전 버튼 클릭 이벤트 핸들러\r\n");
      out.write("      prevButton.addEventListener('click', function () {\r\n");
      out.write("          undo();\r\n");
      out.write("      });\r\n");
      out.write("      // 다음 버튼 클릭 이벤트 핸들러\r\n");
      out.write("      nextButton.addEventListener('click', function () {\r\n");
      out.write("          redo();\r\n");
      out.write("      });\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("      // canvas 상태를 스택에 저장하는 함수 (이전 상태 기록)\r\n");
      out.write("      function saveCanvasState() {\r\n");
      out.write("          var currentState = JSON.stringify(canvas.toDatalessJSON()); // 현재 canvas 상태를 문자열로 저장\r\n");
      out.write("          undoStack.push(currentState); // 스택에 현재 상태 저장\r\n");
      out.write("          // 다음 행동 스택 비우기\r\n");
      out.write("          redoStack.length = 0;\r\n");
      out.write("          // 버튼 상태 업데이트\r\n");
      out.write("          updateButtonState();\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // canvas에 변화가 있을 때마다 상태를 스택에 저장\r\n");
      out.write("      canvas.on('object:modified', saveCanvasState);\r\n");
      out.write("      canvas.on('object:removed', saveCanvasState);\r\n");
      out.write("\r\n");
      out.write("      // 초기 상태에서는 이전 버튼과 다음 버튼 비활성화\r\n");
      out.write("      updateButtonState();\r\n");
      out.write("\r\n");
      out.write("      // 버튼 상태 업데이트 함수\r\n");
      out.write("      function updateButtonState() {\r\n");
      out.write("          // 이전 버튼 비활성화 조건: undoStack이 비어 있을 때\r\n");
      out.write("          prevButton.disabled = undoStack.length === 0;\r\n");
      out.write("          // 다음 버튼 비활성화 조건: redoStack이 비어 있을 때\r\n");
      out.write("          nextButton.disabled = redoStack.length === 0;\r\n");
      out.write("      }\r\n");
      out.write("     \r\n");
      out.write("\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("     // 이미지 저장\r\n");
      out.write("     document.getElementById('save-jpg-button').onclick = function() {\r\n");
      out.write("          var dataURL = canvas.toDataURL({\r\n");
      out.write("            format: 'jpeg',\r\n");
      out.write("            quality: 0.9\r\n");
      out.write("          });\r\n");
      out.write("          var link = document.createElement('a');\r\n");
      out.write("          link.download = 'canvas-image.jpg';\r\n");
      out.write("          link.href = dataURL;\r\n");
      out.write("          link.click();\r\n");
      out.write("      };\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      // 그리기 선 색상\r\n");
      out.write("      document.getElementById('line-color').addEventListener('input', function (e) {\r\n");
      out.write("          lineColor = e.target.value;\r\n");
      out.write("          if (isDrawingMode) {\r\n");
      out.write("              canvas.freeDrawingBrush.color = lineColor; // 현재 선 색상 업데이트\r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("\r\n");
      out.write("      // 선 두께 변경 이벤트 핸들러\r\n");
      out.write("      document.getElementById('line-width').addEventListener('input', function (e) {\r\n");
      out.write("          lineWidth = parseInt(e.target.value, 10);\r\n");
      out.write("          if (isDrawingMode) {\r\n");
      out.write("              canvas.freeDrawingBrush.width = lineWidth; // 현재 선 두께 업데이트\r\n");
      out.write("          }\r\n");
      out.write("      });\r\n");
      out.write("   \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      // 그리기 버튼 클릭 시 세부 버튼 생성 (색상, 두께)\r\n");
      out.write("        document.getElementById('start-drawing-button').addEventListener('click', function() {\r\n");
      out.write("             var drawingOptions = new bootstrap.Collapse(document.getElementById('drawing-options1'));\r\n");
      out.write("             drawingOptions.toggle();\r\n");
      out.write("             \r\n");
      out.write("        \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("        \t canvas.requestRenderAll();\r\n");
      out.write("             \r\n");
      out.write("             // 그리기모드 활성화\r\n");
      out.write("             isDrawingMode = true;\r\n");
      out.write("             canvas.isDrawingMode = true;\r\n");
      out.write("             \r\n");
      out.write("             // 텍스트 모드 비활성화\r\n");
      out.write("             disableTextMode();\r\n");
      out.write("             \r\n");
      out.write("             // 페인트 비활성화\r\n");
      out.write("             isPaintMode=false;\r\n");
      out.write("             canvas.off('mouse:down', fillBackground);\r\n");
      out.write("             \r\n");
      out.write("             $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("             resetColors();  // 콜랩스 색상 초기화\r\n");
      out.write("           });\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      // 텍스트 버튼 클릭 시 세부 버튼 생성\r\n");
      out.write("        document.getElementById('text-button').addEventListener('click', function() {\r\n");
      out.write("             var drawingOptions = new bootstrap.Collapse(document.getElementById('drawing-options2'));\r\n");
      out.write("             drawingOptions.toggle();\r\n");
      out.write("             \r\n");
      out.write("        \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("        \t canvas.requestRenderAll();\r\n");
      out.write("             \r\n");
      out.write("             // 그리기모드 비활성화\r\n");
      out.write("             isDrawingMode = false;\r\n");
      out.write("             canvas.isDrawingMode = false;\r\n");
      out.write("             \r\n");
      out.write("             // 페인트 비활성화\r\n");
      out.write("             isPaintMode=false;\r\n");
      out.write("             canvas.off('mouse:down', fillBackground);\r\n");
      out.write("             \r\n");
      out.write("             $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("             resetColors();  // 콜랩스 색상 초기화\r\n");
      out.write("           });  \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      // 지우개 버튼 클릭 시 세부 버튼 생성 (색상, 두께)\r\n");
      out.write("        document.getElementById('eraser-button').addEventListener('click', function() {\r\n");
      out.write("             var drawingOptions = new bootstrap.Collapse(document.getElementById('drawing-options3'));\r\n");
      out.write("             drawingOptions.toggle();\r\n");
      out.write("             \r\n");
      out.write("        \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("        \t canvas.requestRenderAll();\r\n");
      out.write("             \r\n");
      out.write("             // 텍스트 모드 비활성화\r\n");
      out.write("             disableTextMode();\r\n");
      out.write("             \r\n");
      out.write("             // 페인트 비활성화\r\n");
      out.write("             isPaintMode=false;\r\n");
      out.write("             canvas.off('mouse:down', fillBackground);\r\n");
      out.write("             \r\n");
      out.write("             $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("             resetColors();  // 콜랩스 색상 초기화\r\n");
      out.write("           });   \r\n");
      out.write("         \r\n");
      out.write("      \r\n");
      out.write("      // 페인트 버튼 클릭 시 세부 버튼 생성\r\n");
      out.write("        document.getElementById('paint-btn').addEventListener('click', function() {\r\n");
      out.write("             var drawingOptions = new bootstrap.Collapse(document.getElementById('drawing-options4'));\r\n");
      out.write("             drawingOptions.toggle();\r\n");
      out.write("             \r\n");
      out.write("        \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("        \t canvas.requestRenderAll();\r\n");
      out.write("             \r\n");
      out.write("             // 그리기모드 비활성화\r\n");
      out.write("             isDrawingMode = false;\r\n");
      out.write("             canvas.isDrawingMode = false;\r\n");
      out.write("             \r\n");
      out.write("             // 텍스트 모드 비활성화\r\n");
      out.write("             disableTextMode();\r\n");
      out.write("             \r\n");
      out.write("             $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("             resetColors();  // 콜랩스 색상 초기화\r\n");
      out.write("           });  \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("       // 사진 버튼 클릭 시\r\n");
      out.write("       $(\"#photo-col-btn\").click(function() {\r\n");
      out.write("         $(\"#photo-col\").collapse('toggle');\r\n");
      out.write("         $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("         removeActive(); // 콜랩스 active 초기화\r\n");
      out.write("         \r\n");
      out.write("    \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \t canvas.requestRenderAll();\r\n");
      out.write("    \t \r\n");
      out.write("          // 그리기 모드 비활성화\r\n");
      out.write("          isDrawingMode = false;\r\n");
      out.write("          canvas.isDrawingMode = false;\r\n");
      out.write("          \r\n");
      out.write("          // 텍스트 모드 비활성화\r\n");
      out.write("          disableTextMode();\r\n");
      out.write("          \r\n");
      out.write("          // 페인트 비활성화\r\n");
      out.write("          isPaintMode=false;\r\n");
      out.write("          canvas.off('mouse:down', fillBackground);\r\n");
      out.write("          \r\n");
      out.write("       });\r\n");
      out.write("   \r\n");
      out.write("       \r\n");
      out.write("       // 배경 버튼 클릭 시\r\n");
      out.write("       $(\"#bg-col-btn\").click(function() {\r\n");
      out.write("         $(\"#bg-col\").collapse('toggle');\r\n");
      out.write("         $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("         removeActive(); // 콜랩스 active 초기화\r\n");
      out.write("         \r\n");
      out.write("    \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \t canvas.requestRenderAll();\r\n");
      out.write("         \r\n");
      out.write("          // 그리기 모드 비활성화\r\n");
      out.write("          isDrawingMode = false;\r\n");
      out.write("          canvas.isDrawingMode = false;\r\n");
      out.write("          // 텍스트 모드 비활성화\r\n");
      out.write("          disableTextMode();\r\n");
      out.write("          // 페인트 비활성화\r\n");
      out.write("          isPaintMode=false;\r\n");
      out.write("          canvas.off('mouse:down', fillBackground);\r\n");
      out.write("       });\r\n");
      out.write("   \r\n");
      out.write("       \r\n");
      out.write("   \r\n");
      out.write("       // A.I 버튼 클릭 시\r\n");
      out.write("       $(\"#ai-col-btn\").click(function() {\r\n");
      out.write("         $(\"#ai-col\").collapse('toggle');\r\n");
      out.write("         $(\".collapse\").collapse('hide'); // 모든 콜랩스를 닫음\r\n");
      out.write("         removeActive(); // 콜랩스 active 초기화\r\n");
      out.write("         \r\n");
      out.write("    \t canvas.discardActiveObject(); // 선택된 객체 있을 시 초기화\r\n");
      out.write("    \t canvas.requestRenderAll();\r\n");
      out.write("         \r\n");
      out.write("          // 그리기 모드 비활성화\r\n");
      out.write("          isDrawingMode = false;\r\n");
      out.write("          canvas.isDrawingMode = false;\r\n");
      out.write("          // 텍스트 모드 비활성화\r\n");
      out.write("          disableTextMode();\r\n");
      out.write("          // 페인트 비활성화\r\n");
      out.write("          isPaintMode=false;\r\n");
      out.write("          canvas.off('mouse:down', fillBackground);\r\n");
      out.write("       });\r\n");
      out.write("   });\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("function addStickerToCanvas(url) {\r\n");
      out.write("    fabric.Image.fromURL(url, function(img) {\r\n");
      out.write("        // 이미지 객체 생성\r\n");
      out.write("        img.set({\r\n");
      out.write("            left: canvas.width / 2 - img.width / 2,\r\n");
      out.write("            top: canvas.height / 2 - img.height / 2,\r\n");
      out.write("            scaleX: 0.5, // 필요에 따라 스케일 조정\r\n");
      out.write("            scaleY: 0.5, // 필요에 따라 스케일 조정\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 캔버스에 이미지 추가\r\n");
      out.write("        canvas.add(img);\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("var isCtrlDown = false;\r\n");
      out.write("\r\n");
      out.write("//Ctrl 키 상태 추적\r\n");
      out.write("document.addEventListener('keydown', function(e) {\r\n");
      out.write(" if (e.key === 'Control') {\r\n");
      out.write("     isCtrlDown = true;\r\n");
      out.write(" }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("document.addEventListener('keyup', function(e) {\r\n");
      out.write(" if (e.key === 'Control') {\r\n");
      out.write("     isCtrlDown = false;\r\n");
      out.write(" }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("canvas.on('mouse:wheel', function(opt) {\r\n");
      out.write(" var delta = opt.e.deltaY;\r\n");
      out.write(" var zoom = canvas.getZoom();\r\n");
      out.write(" zoom *= 0.999 ** delta;\r\n");
      out.write(" if (isCtrlDown && canvas.getActiveObject()) {\r\n");
      out.write("     // 마우스 휠을 사용하여 이미지 크기 조정\r\n");
      out.write("     var activeObject = canvas.getActiveObject();\r\n");
      out.write("     if (delta > 0) {\r\n");
      out.write("         activeObject.scaleX *= 1.1;\r\n");
      out.write("         activeObject.scaleY *= 1.1;\r\n");
      out.write("     } else {\r\n");
      out.write("         activeObject.scaleX /= 1.1;\r\n");
      out.write("         activeObject.scaleY /= 1.1;\r\n");
      out.write("     }\r\n");
      out.write("     activeObject.setCoords(); // 좌표 업데이트\r\n");
      out.write("     canvas.renderAll();\r\n");
      out.write(" }\r\n");
      out.write(" // Prevent the whole page from scrolling\r\n");
      out.write(" opt.e.preventDefault();\r\n");
      out.write(" opt.e.stopPropagation();\r\n");
      out.write("});\r\n");
      out.write("  \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write(" \r\n");
      out.write("  \r\n");
      out.write("<!-- 등록 -->    \r\n");
      out.write("<script>\r\n");
      out.write("    var jq3_7_1 = jQuery.noConflict(true);\r\n");
      out.write("</script>\r\n");
      out.write(" \r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("const editableDiv = document.getElementById('editable-div');\r\n");
      out.write("const modalTitle = document.getElementById('modal-title');\r\n");
      out.write("const defaultText = \"제목을 입력하세요!\";\r\n");
      out.write("\r\n");
      out.write("editableDiv.addEventListener('click', function() {\r\n");
      out.write("  if (this.textContent === defaultText) {\r\n");
      out.write("    this.textContent = '';\r\n");
      out.write("    this.style.color = 'black'; // 텍스트 입력 시 색상 변경\r\n");
      out.write("  }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("editableDiv.addEventListener('blur', function() {\r\n");
      out.write("  if (this.textContent.trim() === '') {\r\n");
      out.write("    this.textContent = defaultText;\r\n");
      out.write("    this.style.color = 'grey'; // 플레이스홀더 색상으로 다시 변경\r\n");
      out.write("  }else {\r\n");
      out.write("      modalTitle.textContent = this.textContent; // 모달 헤더의 텍스트를 업데이트합니다.\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$('#myModal').on('show.bs.modal', function (e) {\r\n");
      out.write("    console.log('Modal is about to show');\r\n");
      out.write("    var canvas = document.getElementById('main-canvas');\r\n");
      out.write("    var imageDataURL = canvas.toDataURL('image/png');\r\n");
      out.write("    document.getElementById('canvas-image').src = imageDataURL;\r\n");
      out.write("   \r\n");
      out.write("   });\r\n");
      out.write("</script>\r\n");
      out.write("   \r\n");
      out.write("<script>   \r\n");
      out.write("   \r\n");
      out.write("document.getElementById('upload-button').addEventListener('click', function() {\r\n");
      out.write("    let canvas = document.getElementById('main-canvas');\r\n");
      out.write("    let userIdValue = document.getElementById('user_id').value;\r\n");
      out.write("    let stickerTitleValue = document.getElementById('editable-div').innerText;\r\n");
      out.write("\r\n");
      out.write("    // Canvas 데이터를 Blob 객체로 변환\r\n");
      out.write("    canvas.toBlob(function(blob) {\r\n");
      out.write("        let formData = new FormData();\r\n");
      out.write("        formData.append('file', blob, 'sticker.png'); // 'file'은 서버 측에서 기대하는 필드 이름입니다\r\n");
      out.write("        formData.append('user_id', userIdValue);\r\n");
      out.write("        formData.append('sticker_title', stickerTitleValue);\r\n");
      out.write("   \r\n");
      out.write("        // Ajax 요청 수정\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            type: \"POST\",\r\n");
      out.write("            url: \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sticker/sticker_upload\", // Spring Controller의 URL 주소\r\n");
      out.write("            processData: false,  // FormData 처리를 위해 필요\r\n");
      out.write("            contentType: false,  // FormData 처리를 위해 필요\r\n");
      out.write("            data: formData,\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                alert(\"저장 성공\");\r\n");
      out.write("                window.location.href = \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/\";\r\n");
      out.write("            },\r\n");
      out.write("            error: function(error) {\r\n");
      out.write("                console.error(\"Error sending data to the server\", error);\r\n");
      out.write("                // 에러 처리 로직\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }, 'image/png');\r\n");
      out.write("});\r\n");
      out.write("</script>    \r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("document.getElementById('sticker_temp_upload').addEventListener('click', function() {\r\n");
      out.write("\r\n");
      out.write("\t   // 나중에: Canvas의 상태를 JSON으로 변환\r\n");
      out.write("\t   var canvasJson = JSON.stringify(canvas.toJSON());\r\n");
      out.write("\t    var userIdValue = document.getElementById('user_id').value; // 사용자 ID 가져오기\r\n");
      out.write("\t    var editableDivValue = document.getElementById('editable-div').innerText;\r\n");
      out.write("\t    // AJAX 요청을 통해 서버로 데이터 전송\r\n");
      out.write("\t    let data = {\r\n");
      out.write("\t         user_id: userIdValue,\r\n");
      out.write("\t         sticker_temp_content: canvasJson,\r\n");
      out.write("\t         sticker_temp_title: editableDivValue\r\n");
      out.write("\t       };\r\n");
      out.write("\t    \r\n");
      out.write("\t    \r\n");
      out.write("\t    \r\n");
      out.write("\t    $.ajax({\r\n");
      out.write("\t        url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sticker/sticker_temp_upload', // 데이터를 보낼 서버의 URL\r\n");
      out.write("\t        type: 'POST',\r\n");
      out.write("\t        contentType: 'application/json; charset=utf-8',\r\n");
      out.write("\t        data: JSON.stringify(data),\r\n");
      out.write("\t        success: function(response) {\r\n");
      out.write("\t            alert(\"임시저장성공!\")\r\n");
      out.write("\t        },\r\n");
      out.write("\t        error: function(xhr, status, error) {\r\n");
      out.write("\t            // 오류 발생 시 처리\r\n");
      out.write("\t            console.error('Data could not be sent');\r\n");
      out.write("\t        }\r\n");
      out.write("\t    });\r\n");
      out.write("\t    \r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//모달이 열릴 때 임시저장 목록을 불러오는 함수\r\n");
      out.write("function loadTempStickers() {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sticker/get_sticker_temp_title', // 서버에서 임시저장 목록을 가져오는 URL\r\n");
      out.write("        type: 'GET',\r\n");
      out.write("        dataType :'json',\r\n");
      out.write("        success: function(stickers) {\r\n");
      out.write("            const list = document.getElementById('temp-stickers-list');\r\n");
      out.write("            list.innerHTML = ''; // 리스트 초기화\r\n");
      out.write("\r\n");
      out.write("            stickers.forEach(function(sticker, index) {\r\n");
      out.write("                const item = document.createElement('li');\r\n");
      out.write("                const div1 = document.createElement('div');\r\n");
      out.write("                const div2 = document.createElement('div');\r\n");
      out.write("                const radioButton = document.createElement('input');\r\n");
      out.write("                \r\n");
      out.write("                item.className = \"temp-list-li\";\r\n");
      out.write("                div1.className = \"name-div\";\r\n");
      out.write("                div2.className = \"del-div\";\r\n");
      out.write("                radioButton.type = 'radio';\r\n");
      out.write("                radioButton.name = 'tempSticker'; // 같은 name으로 그룹화하여 한 번에 하나만 선택 가능하게 함\r\n");
      out.write("                radioButton.value = sticker.sticker_temp_idx; // 라디오 버튼 값으로 스티커 ID 설정\r\n");
      out.write("                \r\n");
      out.write("                const deleteButton = document.createElement('button');\r\n");
      out.write("                deleteButton.textContent = '삭제';\r\n");
      out.write("                deleteButton.className = 'temp-btn';\r\n");
      out.write("                \r\n");
      out.write("                deleteButton.onclick = function() { delete_temp_Sticker(sticker.sticker_temp_idx, item); };\r\n");
      out.write("                \r\n");
      out.write("                div1.appendChild(radioButton);\r\n");
      out.write("                div1.appendChild(document.createTextNode(sticker.sticker_temp_title)); // 스티커 제목 추가\r\n");
      out.write("                item.appendChild(div1);\r\n");
      out.write("                \r\n");
      out.write("                div2.appendChild(deleteButton);\r\n");
      out.write("                item.appendChild(div2);\r\n");
      out.write("                list.appendChild(item);\r\n");
      out.write("                \r\n");
      out.write("            });\r\n");
      out.write("        },\r\n");
      out.write("        error: function(xhr, status, error) {\r\n");
      out.write("            console.error('Error loading stickers:', error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function delete_temp_Sticker(sticker_temp_idx, listItem) {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("        url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sticker/delete_temp_Sticker/' + sticker_temp_idx,\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        success: function(response) {\r\n");
      out.write("            // 서버에서 삭제 성공 시, 리스트에서 항목 제거\r\n");
      out.write("            \r\n");
      out.write("            listItem.remove();\r\n");
      out.write("        },\r\n");
      out.write("        error: function(xhr, status, error) {\r\n");
      out.write("            console.error('Error deleting sticker:', error);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//모달이 열릴 때마다 임시저장 목록을 불러옵니다\r\n");
      out.write("$('#temp_Modal').on('show.bs.modal', loadTempStickers);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("document.getElementById('temp_load').addEventListener('click', function() {\r\n");
      out.write("    // 선택된 라디오 버튼의 값을 가져오기\r\n");
      out.write("    var sticker_temp_idx = document.querySelector('input[name=\"tempSticker\"]:checked').value;\r\n");
      out.write("\r\n");
      out.write("    if (sticker_temp_idx) {\r\n");
      out.write("        // 스티커 데이터를 가져오기 위한 AJAX 요청\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/sticker/get_sticker_temp_content/' + sticker_temp_idx,\r\n");
      out.write("            type: 'GET',\r\n");
      out.write("            dataType: 'json',\r\n");
      out.write("            success: function(stickerData) {\r\n");
      out.write("                // 캔버스에 스티커 데이터 렌더링\r\n");
      out.write("                renderStickerOnCanvas(stickerData);\r\n");
      out.write("                \r\n");
      out.write("            },\r\n");
      out.write("            error: function(xhr, status, error) {\r\n");
      out.write("                console.error('스티커 데이터 로딩 오류:', error);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    } else {\r\n");
      out.write("        alert('로드할 스티커를 선택해주세요.');\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function renderStickerOnCanvas(stickerData) {\r\n");
      out.write("    \r\n");
      out.write("    canvas.loadFromJSON(stickerData, function() {\r\n");
      out.write("        canvas.renderAll(); // 데이터 로드 후 캔버스 렌더링\r\n");
      out.write("        \r\n");
      out.write("    });\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("//AI 기능 모달 함수\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("$(\"#aimodal-button\").click(function(){\r\n");
      out.write("    var menu_list = ['Ai-menu1', 'Ai-menu2', 'Ai-menu3', 'Ai-menu4'];\r\n");
      out.write("    menu_list.forEach(function(menu) {    \r\n");
      out.write("        $(\"#\"+menu).hide(); // 모든 div 숨김\r\n");
      out.write("    });\r\n");
      out.write("    $(\"#Ai-menu1\").show(); // '배경 지우기' 컨텐츠 기본적으로 표시\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$(\".Ai-menu__a\").click(function(){\r\n");
      out.write("    var menu_list = ['Ai-menu1', 'Ai-menu2', 'Ai-menu3', 'Ai-menu4'];\r\n");
      out.write("    menu_list.forEach(function(menu) {\r\n");
      out.write("        $(\"#\"+menu).hide(); // 모든 div 숨김\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    var selectedMenu = $(this).attr('href'); // 선택된 요소의 href 값 가져오기\r\n");
      out.write("    $(selectedMenu).show(); // 선택된 요소만 표시\r\n");
      out.write("\r\n");
      out.write("    var index = selectedMenu.replace(/[^0-9]/g, ''); // 숫자가 아닌 모든 문자 제거\r\n");
      out.write("    aiModal_index = parseInt(index); // 문자열을 숫자로 변환\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- AI에서 ajax를 쓰는 코드 이미지 플라스크 -->\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/aiFunction/aiAjax.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- MODAL에서 AI DIV로 보내는 이미지 플라스크 -->\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${cpath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/aiFunction/aiUpload.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/main/editphoto.jsp(7,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("cpath");
      // /WEB-INF/views/main/editphoto.jsp(7,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/main/editphoto.jsp(7,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f1 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f1_reused = false;
    try {
      _jspx_th_c_005fset_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f1.setParent(null);
      // /WEB-INF/views/main/editphoto.jsp(8,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setVar("awsPath");
      // /WEB-INF/views/main/editphoto.jsp(8,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f1.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/main/editphoto.jsp(8,0) 'https://daydayday.s3.ap-northeast-2.amazonaws.com'",_jsp_getExpressionFactory().createValueExpression("https://daydayday.s3.ap-northeast-2.amazonaws.com",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f1 = _jspx_th_c_005fset_005f1.doStartTag();
      if (_jspx_th_c_005fset_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f1);
      _jspx_th_c_005fset_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fset_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f2 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f2_reused = false;
    try {
      _jspx_th_c_005fset_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f2.setParent(null);
      // /WEB-INF/views/main/editphoto.jsp(9,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f2.setVar("address");
      // /WEB-INF/views/main/editphoto.jsp(9,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f2.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/main/editphoto.jsp(9,0) '${address}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${address}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f2 = _jspx_th_c_005fset_005f2.doStartTag();
      if (_jspx_th_c_005fset_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f2);
      _jspx_th_c_005fset_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f2_reused);
    }
    return false;
  }
}
